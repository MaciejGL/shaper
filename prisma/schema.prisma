generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String            @id @default(uuid())
  email                String            @unique
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  image                String?
  name                 String?
  role                 String            @default("CLIENT")
  trainerId            String?
  BaseExercise         BaseExercise[]
  receivedRequests     CoachingRequest[] @relation("ReceivedRequests")
  sentRequests         CoachingRequest[] @relation("SentRequests")
  exerciseLogs         ExerciseLog[]
  createdNotes         Note[]            @relation("CreatedNotes")
  createdNotifications Notification[]    @relation("NotificationCreator")
  notifications        Notification[]
  reviews              Review[]
  assignedPlans        TrainingPlan[]    @relation("AssignedPlans")
  createdPlans         TrainingPlan[]    @relation("CreatedPlans")
  trainer              User?             @relation("TrainerClients", fields: [trainerId], references: [id])
  clients              User[]            @relation("TrainerClients")
  profile              UserProfile?
  sessions             UserSession[]
  assignedMealPlans    MealPlan[]        @relation("AssignedMealPlans")
  createdMealPlans     MealPlan[]        @relation("CreatedMealPlans")
  mealLogs             MealLog[]         @relation("MealLogs")
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserProfile {
  id            String            @id @default(uuid())
  userId        String            @unique
  firstName     String?
  lastName      String?
  phone         String?
  birthday      DateTime?
  sex           String?
  avatarUrl     String?
  activityLevel String?
  bio           String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  allergies     String?
  fitnessLevel  String?
  height        Float?
  weight        Float?
  goals         String[]
  bodyMeasures  UserBodyMeasure[]
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserBodyMeasure {
  id            String      @id @default(uuid())
  userProfileId String
  measuredAt    DateTime    @default(now())
  weight        Float?
  height        Float?
  chest         Float?
  waist         Float?
  hips          Float?
  neck          Float?
  bodyFat       Float?
  notes         String?
  bicepsLeft    Float?
  bicepsRight   Float?
  calfLeft      Float?
  calfRight     Float?
  thighLeft     Float?
  thighRight    Float?
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@index([userProfileId])
}

model CoachingRequest {
  id          String   @id @default(uuid())
  senderId    String
  recipientId String
  status      String   @default("PENDING")
  message     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  recipient   User     @relation("ReceivedRequests", fields: [recipientId], references: [id])
  sender      User     @relation("SentRequests", fields: [senderId], references: [id])

  @@index([senderId])
  @@index([recipientId])
}

model Notification {
  id            String   @id @default(uuid())
  userId        String
  createdBy     String?
  message       String
  type          String
  read          Boolean  @default(false)
  link          String?
  metadata      Json?
  createdAt     DateTime @default(now())
  relatedItemId String?
  creator       User?    @relation("NotificationCreator", fields: [createdBy], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdBy])
  @@index([userId, read])
  @@index([userId, createdAt])
}

model TrainingPlan {
  id           String         @id @default(uuid())
  title        String
  description  String?
  createdById  String
  isPublic     Boolean        @default(false)
  isTemplate   Boolean        @default(false)
  templateId   String?
  completedAt  DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  assignedToId String?
  isDraft      Boolean        @default(true)
  active       Boolean        @default(false)
  endDate      DateTime?
  startDate    DateTime?
  difficulty   String?
  reviews      Review[]
  assignedTo   User?          @relation("AssignedPlans", fields: [assignedToId], references: [id])
  createdBy    User           @relation("CreatedPlans", fields: [createdById], references: [id])
  template     TrainingPlan?  @relation("Template", fields: [templateId], references: [id])
  templates    TrainingPlan[] @relation("Template")
  weeks        TrainingWeek[]

  @@index([completedAt])
}

model TrainingWeek {
  id          String        @id @default(uuid())
  planId      String
  weekNumber  Int
  completedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  description String?
  name        String
  scheduledAt DateTime?
  isExtra     Boolean       @default(false)
  days        TrainingDay[]
  plan        TrainingPlan  @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([completedAt])
}

model TrainingDay {
  id          String                @id @default(uuid())
  weekId      String
  dayOfWeek   Int
  completedAt DateTime?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  isRestDay   Boolean               @default(false)
  workoutType String?
  scheduledAt DateTime?
  isExtra     Boolean               @default(false)
  week        TrainingWeek          @relation(fields: [weekId], references: [id], onDelete: Cascade)
  exercises   TrainingExercise[]
  events      WorkoutSessionEvent[]

  @@index([completedAt])
}

model TrainingExercise {
  id                     String            @id @default(uuid())
  name                   String
  restSeconds            Int?
  tempo                  String?
  instructions           String?
  order                  Int
  baseId                 String?
  dayId                  String
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  warmupSets             Int?
  completedAt            DateTime?
  additionalInstructions String?
  type                   String?
  isExtra                Boolean           @default(false)
  logs                   ExerciseLog[]
  sets                   ExerciseSet[]
  substitutedBy          TrainingExercise? @relation("ReplacedBy", fields: [substitutedById], references: [id])
  substitutedById        String?           @unique

  substitutes TrainingExercise? @relation("ReplacedBy")

  base BaseExercise? @relation(fields: [baseId], references: [id])
  day  TrainingDay   @relation(fields: [dayId], references: [id], onDelete: Cascade)

  @@index([dayId])
  @@index([baseId])
  @@index([completedAt])
}

model ExerciseSet {
  id          String           @id @default(uuid())
  order       Int
  reps        Int?
  weight      Float?
  exerciseId  String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  rpe         Int?
  maxReps     Int?
  minReps     Int?
  completedAt DateTime?
  logId       String?          @unique
  isExtra     Boolean          @default(false)
  exercise    TrainingExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  log         ExerciseSetLog?  @relation(fields: [logId], references: [id], onDelete: Cascade)

  @@index([exerciseId])
  @@index([completedAt])
}

model ExerciseLog {
  id          String           @id @default(uuid())
  performedAt DateTime         @default(now())
  notes       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userId      String
  exerciseId  String
  exercise    TrainingExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  user        User             @relation(fields: [userId], references: [id])
}

model ExerciseSetLog {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  reps        Int?
  weight      Float?
  rpe         Int?
  ExerciseSet ExerciseSet?
}

model BaseExercise {
  id                     String                   @id @default(uuid())
  name                   String
  description            String?
  videoUrl               String?
  equipment              String?
  createdById            String?
  isPublic               Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  additionalInstructions String?
  type                   String?
  createdBy              User?                    @relation(fields: [createdById], references: [id])
  trainingExercises      TrainingExercise[]
  muscleGroups           MuscleGroup[]            @relation("ExerciseMuscleGroups")
  substitutes            BaseExerciseSubstitute[] @relation("OriginalExercise")
  substitutedBy          BaseExerciseSubstitute[] @relation("SubstituteExercise")
}

model MuscleGroup {
  id         String              @id @default(uuid())
  name       String              @unique
  alias      String?
  groupSlug  String
  isPrimary  Boolean             @default(true)
  createdAt  DateTime            @default(now())
  categoryId String
  category   MuscleGroupCategory @relation(fields: [categoryId], references: [id])
  exercises  BaseExercise[]      @relation("ExerciseMuscleGroups")
}

model MuscleGroupCategory {
  id        String        @id @default(uuid())
  name      String        @unique
  slug      String        @unique
  createdAt DateTime      @default(now())
  muscles   MuscleGroup[]
}

model Note {
  id          String   @id @default(uuid())
  text        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  relatedToId String?
  metadata    Json?
  createdBy   User     @relation("CreatedNotes", fields: [createdById], references: [id])

  @@index([createdById])
  @@index([relatedToId])
}

model WorkoutSessionEvent {
  id            String      @id @default(cuid())
  dayId         String
  type          String
  timestamp     DateTime    @default(now())
  createdAt     DateTime    @default(now())
  totalDuration Int         @default(0)
  day           TrainingDay @relation(fields: [dayId], references: [id], onDelete: Cascade)

  @@index([dayId])
}

model Review {
  id             String       @id @default(uuid())
  trainingPlanId String
  rating         Int
  comment        String?
  createdById    String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isEdited       Boolean      @default(false)
  isHidden       Boolean      @default(false)
  flagged        Boolean      @default(false)
  flagReason     String?
  createdBy      User         @relation(fields: [createdById], references: [id])
  trainingPlan   TrainingPlan @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)

  @@index([trainingPlanId])
  @@index([createdById])
  @@index([isHidden])
  @@index([flagged])
}

model BaseExerciseSubstitute {
  id           String       @id @default(uuid())
  originalId   String
  substituteId String
  reason       String?
  createdAt    DateTime     @default(now())
  original     BaseExercise @relation("OriginalExercise", fields: [originalId], references: [id], onDelete: Cascade)
  substitute   BaseExercise @relation("SubstituteExercise", fields: [substituteId], references: [id], onDelete: Cascade)

  @@unique([originalId, substituteId])
  @@index([originalId])
  @@index([substituteId])
}

// MEAL plan

model MealPlan {
  id           String    @id @default(uuid())
  title        String
  description  String?
  createdById  String
  isPublic     Boolean   @default(false)
  isTemplate   Boolean   @default(false)
  templateId   String?
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  assignedToId String?
  isDraft      Boolean   @default(true)
  active       Boolean   @default(false)
  endDate      DateTime?
  startDate    DateTime?

  // Nutritional goals/targets (moved here as you suggested)
  dailyCalories Float?
  dailyProtein  Float?
  dailyCarbs    Float?
  dailyFat      Float?

  assignedTo User?      @relation("AssignedMealPlans", fields: [assignedToId], references: [id])
  createdBy  User       @relation("CreatedMealPlans", fields: [createdById], references: [id])
  template   MealPlan?  @relation("MealTemplate", fields: [templateId], references: [id])
  templates  MealPlan[] @relation("MealTemplate")
  weeks      MealWeek[]

  @@index([completedAt])
}

model MealWeek {
  id          String    @id @default(uuid())
  planId      String
  weekNumber  Int
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  description String?
  name        String
  isExtra     Boolean   @default(false)

  days MealDay[]
  plan MealPlan  @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([completedAt])
}

model MealDay {
  id          String    @id @default(uuid())
  weekId      String
  dayOfWeek   Int // 0-6 (Monday-Sunday)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  scheduledAt DateTime?

  // Daily nutritional targets (can override plan defaults)
  targetCalories Float?
  targetProtein  Float?
  targetCarbs    Float?
  targetFat      Float?

  week  MealWeek @relation(fields: [weekId], references: [id], onDelete: Cascade)
  meals Meal[]

  @@index([completedAt])
}

model Meal {
  id           String   @id @default(uuid())
  dayId        String
  name         String // "Breakfast", "Lunch", "Dinner", "Snack 1", etc.
  dateTime     DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  instructions String?

  day   MealDay    @relation(fields: [dayId], references: [id], onDelete: Cascade)
  foods MealFood[]
  logs  MealLog[] // Actual consumption logs

  @@index([dateTime])
}

// Planned foods in the meal plan template
model MealFood {
  id        String   @id @default(uuid())
  mealId    String
  name      String
  quantity  Float // Planned amount
  unit      String // "grams", "cups", "pieces", etc.
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Nutritional information per 100g (from API)
  caloriesPer100g Float?
  proteinPer100g  Float?
  carbsPer100g    Float?
  fatPer100g      Float?
  fiberPer100g    Float?

  // Open Food Facts integration
  openFoodFactsId String? // Barcode or product ID
  productData     Json? // Cached product data from API

  meal        Meal          @relation(fields: [mealId], references: [id], onDelete: Cascade)
  MealLogItem MealLogItem[]
}

// Actual consumption logs by users
model MealLog {
  id          String    @id @default(uuid())
  mealId      String
  userId      String
  loggedAt    DateTime  @default(now())
  completedAt DateTime? // When the meal was actually consumed

  meal  Meal          @relation(fields: [mealId], references: [id], onDelete: Cascade)
  user  User          @relation("MealLogs", fields: [userId], references: [id])
  items MealLogItem[]

  @@index([userId, loggedAt])
  @@index([mealId])
}

// Individual food items logged by the user
model MealLogItem {
  id    String @id @default(uuid())
  logId String

  // Food identification
  name     String
  barcode  String? // For easy re-logging
  quantity Float // Actual amount consumed
  unit     String

  // Nutritional data (calculated from quantity)
  calories Float?
  protein  Float?
  carbs    Float?
  fat      Float?
  fiber    Float?

  // Open Food Facts integration
  openFoodFactsId String?
  productData     Json? // Cached product data

  // Reference to planned food (if logging from plan)
  plannedFoodId String? // Links to MealFood if logging planned item

  notes     String? // User notes about preparation, etc.
  createdAt DateTime @default(now())

  log         MealLog   @relation(fields: [logId], references: [id], onDelete: Cascade)
  plannedFood MealFood? @relation(fields: [plannedFoodId], references: [id])

  @@index([logId])
}

// Food database cache (to reduce API calls)
model FoodProduct {
  id              String  @id @default(uuid())
  openFoodFactsId String  @unique // Barcode or product ID
  name            String
  brand           String?

  // Nutritional data per 100g
  caloriesPer100g Float?
  proteinPer100g  Float?
  carbsPer100g    Float?
  fatPer100g      Float?
  fiberPer100g    Float?

  // Full product data from API
  productData Json

  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())

  @@index([name])
  @@index([lastUpdated])
}
