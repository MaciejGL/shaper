generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                               String                     @id @default(uuid())
  email                            String                     @unique
  createdAt                        DateTime                   @default(now())
  updatedAt                        DateTime                   @updatedAt
  image                            String?
  name                             String?
  role                             String                     @default("CLIENT")
  trainerId                        String?
  BaseExercise                     BaseExercise[]
  receivedRequests                 CoachingRequest[]          @relation("ReceivedRequests")
  sentRequests                     CoachingRequest[]          @relation("SentRequests")
  receivedCollaborationInvitations CollaborationInvitation[]  @relation("ReceivedCollaborationInvitations")
  sentCollaborationInvitations     CollaborationInvitation[]  @relation("SentCollaborationInvitations")
  exerciseLogs                     ExerciseLog[]
  addedMealFoods                   MealFood[]                 @relation("AddedMealFoods")
  mealFoodLogs                     MealFoodLog[]              @relation("MealFoodLogs")
  assignedMealPlans                MealPlan[]                 @relation("AssignedMealPlans")
  createdMealPlans                 MealPlan[]                 @relation("CreatedMealPlans")
  addedMealPlanCollaborators       MealPlanCollaborator[]     @relation("AddedMealPlanCollaborators")
  mealPlanCollaborations           MealPlanCollaborator[]     @relation("MealPlanCollaborations")
  createdNotes                     Note[]                     @relation("CreatedNotes")
  createdNotifications             Notification[]             @relation("NotificationCreator")
  notifications                    Notification[]
  reviews                          Review[]
  assignedPlans                    TrainingPlan[]             @relation("AssignedPlans")
  createdPlans                     TrainingPlan[]             @relation("CreatedPlans")
  addedTrainingPlanCollaborators   TrainingPlanCollaborator[] @relation("AddedTrainingPlanCollaborators")
  trainingPlanCollaborations       TrainingPlanCollaborator[] @relation("TrainingPlanCollaborations")
  createdFavouriteWorkouts         FavouriteWorkout[]         @relation("CreatedFavouriteWorkouts")
  trainer                          User?                      @relation("TrainerClients", fields: [trainerId], references: [id])
  clients                          User[]                     @relation("TrainerClients")
  profile                          UserProfile?
  sessions                         UserSession[]
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserProfile {
  id            String            @id @default(uuid())
  userId        String            @unique
  firstName     String?
  lastName      String?
  phone         String?
  birthday      DateTime?
  sex           String?
  avatarUrl     String?
  activityLevel String?
  bio           String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  allergies     String?
  fitnessLevel  String?
  height        Float?
  weight        Float?
  goals         String[]
  // User Preferences
  weekStartsOn  Int?              @default(1) // 0 = Sunday, 1 = Monday
  weightUnit    String?           @default("kg") // "kg" | "lbs"
  heightUnit    String?           @default("cm") // "cm" | "ft"
  theme         String?           @default("system") // "light" | "dark" | "system"
  timeFormat    String?           @default("24h") // "12h" | "24h"
  trainingView  String?           @default("advanced") // "simple" | "advanced"
  // Notification Preferences
  workoutReminders              Boolean? @default(true)
  mealReminders                 Boolean? @default(true)
  progressUpdates               Boolean? @default(true)
  collaborationNotifications    Boolean? @default(true)
  systemNotifications           Boolean? @default(true)
  emailNotifications            Boolean? @default(true)
  pushNotifications             Boolean? @default(false) // Disabled for now as requested
  bodyMeasures  UserBodyMeasure[]
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserBodyMeasure {
  id            String      @id @default(uuid())
  userProfileId String
  measuredAt    DateTime    @default(now())
  weight        Float?
  height        Float?
  chest         Float?
  waist         Float?
  hips          Float?
  neck          Float?
  bodyFat       Float?
  notes         String?
  bicepsLeft    Float?
  bicepsRight   Float?
  calfLeft      Float?
  calfRight     Float?
  thighLeft     Float?
  thighRight    Float?
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@index([userProfileId])
}

model CoachingRequest {
  id          String   @id @default(uuid())
  senderId    String
  recipientId String
  status      String   @default("PENDING")
  message     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  recipient   User     @relation("ReceivedRequests", fields: [recipientId], references: [id])
  sender      User     @relation("SentRequests", fields: [senderId], references: [id])

  @@index([senderId])
  @@index([recipientId])
}

model Notification {
  id            String   @id @default(uuid())
  userId        String
  createdBy     String?
  message       String
  type          String
  read          Boolean  @default(false)
  link          String?
  metadata      Json?
  createdAt     DateTime @default(now())
  relatedItemId String?
  creator       User?    @relation("NotificationCreator", fields: [createdBy], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdBy])
  @@index([userId, read])
  @@index([userId, createdAt])
}

model TrainingPlan {
  id            String                     @id @default(uuid())
  title         String
  description   String?
  createdById   String
  isPublic      Boolean                    @default(false)
  isTemplate    Boolean                    @default(false)
  templateId    String?
  completedAt   DateTime?
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
  assignedToId  String?
  isDraft       Boolean                    @default(true)
  active        Boolean                    @default(false)
  endDate       DateTime?
  startDate     DateTime?
  difficulty    String?
  reviews       Review[]
  assignedTo    User?                      @relation("AssignedPlans", fields: [assignedToId], references: [id])
  createdBy     User                       @relation("CreatedPlans", fields: [createdById], references: [id])
  template      TrainingPlan?              @relation("Template", fields: [templateId], references: [id])
  templates     TrainingPlan[]             @relation("Template")
  collaborators TrainingPlanCollaborator[]
  weeks         TrainingWeek[]

  @@index([completedAt])
  @@index([assignedToId])
  @@index([assignedToId, active])
  @@index([assignedToId, createdById])
  @@index([createdById])
  @@index([active])
}

model TrainingWeek {
  id          String        @id @default(uuid())
  planId      String
  weekNumber  Int
  completedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  description String?
  name        String
  scheduledAt DateTime?
  isExtra     Boolean       @default(false)
  days        TrainingDay[]
  plan        TrainingPlan  @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([completedAt])
  @@index([planId])
  @@index([planId, weekNumber])
}

model TrainingDay {
  id          String                @id @default(uuid())
  weekId      String
  dayOfWeek   Int
  completedAt DateTime?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  isRestDay   Boolean               @default(false)
  workoutType String?
  scheduledAt DateTime?
  isExtra     Boolean               @default(false)
  week        TrainingWeek          @relation(fields: [weekId], references: [id], onDelete: Cascade)
  exercises   TrainingExercise[]
  events      WorkoutSessionEvent[]

  @@index([completedAt])
  @@index([weekId])
  @@index([weekId, dayOfWeek])
}

model TrainingExercise {
  id                     String            @id @default(uuid())
  name                   String
  restSeconds            Int?
  tempo                  String?
  instructions           String?
  order                  Int
  baseId                 String?
  dayId                  String
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  warmupSets             Int?
  completedAt            DateTime?
  additionalInstructions String?
  type                   String?
  isExtra                Boolean           @default(false)
  substitutedById        String?           @unique
  logs                   ExerciseLog[]
  sets                   ExerciseSet[]
  base                   BaseExercise?     @relation(fields: [baseId], references: [id])
  day                    TrainingDay       @relation(fields: [dayId], references: [id], onDelete: Cascade)
  substitutedBy          TrainingExercise? @relation("ReplacedBy", fields: [substitutedById], references: [id])
  substitutes            TrainingExercise? @relation("ReplacedBy")

  @@index([dayId])
  @@index([baseId])
  @@index([completedAt])
}

model ExerciseSet {
  id          String           @id @default(uuid())
  order       Int
  reps        Int?
  weight      Float?
  exerciseId  String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  rpe         Int?
  maxReps     Int?
  minReps     Int?
  completedAt DateTime?
  logId       String?          @unique
  isExtra     Boolean          @default(false)
  exercise    TrainingExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  log         ExerciseSetLog?  @relation(fields: [logId], references: [id], onDelete: Cascade)

  @@index([exerciseId])
  @@index([completedAt])
}

model ExerciseLog {
  id          String           @id @default(uuid())
  performedAt DateTime         @default(now())
  notes       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userId      String
  exerciseId  String
  exercise    TrainingExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  user        User             @relation(fields: [userId], references: [id])
}

model ExerciseSetLog {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  reps        Int?
  weight      Float?
  rpe         Int?
  ExerciseSet ExerciseSet?
}

model BaseExercise {
  id                     String                   @id @default(uuid())
  name                   String
  description            String?
  videoUrl               String?
  equipment              String?
  createdById            String?
  isPublic               Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  additionalInstructions String?
  type                   String?

  // V2 Exercise Integration Fields
  version                Int                      @default(1) // 1 = manual, 2 = imported
  dataSource             String?                              // "exercemus", "manual", etc.
  sourceId               String?                              // Original ID from source
  importedAt             DateTime?                            // When imported
  difficulty             String?                              // "beginner", "intermediate", "advanced"
  instructions           String?                              // JSON array of step-by-step instructions
  tips                   String?                              // JSON array of exercise tips
  
  // Premium Feature for Subscriptions
  isPremium              Boolean                  @default(false) // Premium exercises for paid plans

  createdBy              User?                    @relation(fields: [createdById], references: [id])
  substitutes            BaseExerciseSubstitute[] @relation("OriginalExercise")
  substitutedBy          BaseExerciseSubstitute[] @relation("SubstituteExercise")
  trainingExercises      TrainingExercise[]
  favouriteWorkoutExercises FavouriteWorkoutExercise[]
  muscleGroups           MuscleGroup[]            @relation("ExerciseMuscleGroups")
  images                 Image[]                  @relation("ExerciseImages")

  @@index([version])
  @@index([dataSource])
  @@index([difficulty])
  @@index([importedAt])
  @@index([isPremium])
}

model Image {
  id         String   @id @default(uuid())
  url        String
  order      Int      @default(0)
  entityType String // 'exercise', 'user_progress', etc.
  entityId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations for different entity types
  exercise BaseExercise? @relation("ExerciseImages", fields: [entityId], references: [id], map: "exercise_image_fk")

  @@index([entityType, entityId])
  @@index([order])
}

model MuscleGroup {
  id         String              @id @default(uuid())
  name       String              @unique
  alias      String?
  groupSlug  String
  isPrimary  Boolean             @default(true)
  createdAt  DateTime            @default(now())
  categoryId String
  category   MuscleGroupCategory @relation(fields: [categoryId], references: [id])
  exercises  BaseExercise[]      @relation("ExerciseMuscleGroups")
}

model MuscleGroupCategory {
  id        String        @id @default(uuid())
  name      String        @unique
  slug      String        @unique
  createdAt DateTime      @default(now())
  muscles   MuscleGroup[]
}

model Note {
  id          String   @id @default(uuid())
  text        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  relatedToId String?
  metadata    Json?
  createdBy   User     @relation("CreatedNotes", fields: [createdById], references: [id])

  @@index([createdById])
  @@index([relatedToId])
}

model WorkoutSessionEvent {
  id            String      @id @default(cuid())
  dayId         String
  type          String
  timestamp     DateTime    @default(now())
  createdAt     DateTime    @default(now())
  totalDuration Int         @default(0)
  day           TrainingDay @relation(fields: [dayId], references: [id], onDelete: Cascade)

  @@index([dayId])
}

model Review {
  id             String       @id @default(uuid())
  trainingPlanId String
  rating         Int
  comment        String?
  createdById    String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isEdited       Boolean      @default(false)
  isHidden       Boolean      @default(false)
  flagged        Boolean      @default(false)
  flagReason     String?
  createdBy      User         @relation(fields: [createdById], references: [id])
  trainingPlan   TrainingPlan @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)

  @@index([trainingPlanId])
  @@index([createdById])
  @@index([isHidden])
  @@index([flagged])
}

model BaseExerciseSubstitute {
  id           String       @id @default(uuid())
  originalId   String
  substituteId String
  reason       String?
  createdAt    DateTime     @default(now())
  original     BaseExercise @relation("OriginalExercise", fields: [originalId], references: [id], onDelete: Cascade)
  substitute   BaseExercise @relation("SubstituteExercise", fields: [substituteId], references: [id], onDelete: Cascade)

  @@unique([originalId, substituteId])
  @@index([originalId])
  @@index([substituteId])
}

model CollaborationInvitation {
  id          String   @id @default(uuid())
  senderId    String
  recipientId String
  status      String   @default("PENDING")
  message     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  recipient   User     @relation("ReceivedCollaborationInvitations", fields: [recipientId], references: [id])
  sender      User     @relation("SentCollaborationInvitations", fields: [senderId], references: [id])

  @@index([senderId])
  @@index([recipientId])
  @@index([status])
}

model TrainingPlanCollaborator {
  id             String       @id @default(uuid())
  trainingPlanId String
  collaboratorId String
  addedById      String
  permission     String       @default("EDIT")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  addedBy        User         @relation("AddedTrainingPlanCollaborators", fields: [addedById], references: [id])
  collaborator   User         @relation("TrainingPlanCollaborations", fields: [collaboratorId], references: [id])
  trainingPlan   TrainingPlan @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)

  @@unique([trainingPlanId, collaboratorId])
  @@index([trainingPlanId])
  @@index([collaboratorId])
}

model MealPlanCollaborator {
  id             String   @id @default(uuid())
  mealPlanId     String
  collaboratorId String
  addedById      String
  permission     String   @default("EDIT")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  addedBy        User     @relation("AddedMealPlanCollaborators", fields: [addedById], references: [id])
  collaborator   User     @relation("MealPlanCollaborations", fields: [collaboratorId], references: [id])
  mealPlan       MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)

  @@unique([mealPlanId, collaboratorId])
  @@index([mealPlanId])
  @@index([collaboratorId])
}

model MealPlan {
  id            String                 @id @default(uuid())
  title         String
  description   String?
  createdById   String
  isPublic      Boolean                @default(false)
  isTemplate    Boolean                @default(false)
  templateId    String?
  completedAt   DateTime?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  assignedToId  String?
  isDraft       Boolean                @default(true)
  active        Boolean                @default(false)
  endDate       DateTime?
  startDate     DateTime?
  dailyCalories Float?
  dailyProtein  Float?
  dailyCarbs    Float?
  dailyFat      Float?
  assignedTo    User?                  @relation("AssignedMealPlans", fields: [assignedToId], references: [id])
  createdBy     User                   @relation("CreatedMealPlans", fields: [createdById], references: [id])
  template      MealPlan?              @relation("MealTemplate", fields: [templateId], references: [id])
  templates     MealPlan[]             @relation("MealTemplate")
  collaborators MealPlanCollaborator[]
  weeks         MealWeek[]

  @@index([completedAt])
}

model MealWeek {
  id          String    @id @default(uuid())
  planId      String
  weekNumber  Int
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  description String?
  name        String
  isExtra     Boolean   @default(false)
  days        MealDay[]
  plan        MealPlan  @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([completedAt])
}

model MealDay {
  id             String    @id @default(uuid())
  weekId         String
  dayOfWeek      Int
  completedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  scheduledAt    DateTime?
  targetCalories Float?
  targetProtein  Float?
  targetCarbs    Float?
  targetFat      Float?
  meals          Meal[]
  week           MealWeek  @relation(fields: [weekId], references: [id], onDelete: Cascade)

  @@index([completedAt])
}

model Meal {
  id           String     @id @default(uuid())
  dayId        String
  name         String
  dateTime     DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  instructions String?
  day          MealDay    @relation(fields: [dayId], references: [id], onDelete: Cascade)
  foods        MealFood[]
  completedAt  DateTime?

  @@index([dateTime])
}

model MealFood {
  id              String        @id @default(uuid())
  mealId          String
  name            String
  quantity        Float
  unit            String
  addedAt         DateTime      @default(now())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  caloriesPer100g Float?
  proteinPer100g  Float?
  carbsPer100g    Float?
  fatPer100g      Float?
  fiberPer100g    Float?
  openFoodFactsId String?
  productData     Json?
  addedById       String?
  meal            Meal          @relation(fields: [mealId], references: [id], onDelete: Cascade)
  addedBy         User?         @relation("AddedMealFoods", fields: [addedById], references: [id])
  logs            MealFoodLog[]

  @@index([mealId])
  @@index([addedAt])
}

model MealFoodLog {
  id         String   @id @default(uuid())
  mealFoodId String
  userId     String
  quantity   Float
  unit       String
  loggedAt   DateTime @default(now())
  notes      String?
  calories   Float?
  protein    Float?
  carbs      Float?
  fat        Float?
  fiber      Float?
  mealFood   MealFood @relation(fields: [mealFoodId], references: [id], onDelete: Cascade)
  user       User     @relation("MealFoodLogs", fields: [userId], references: [id])

  @@index([mealFoodId])
  @@index([userId, loggedAt])
}

model FoodProduct {
  id              String   @id @default(uuid())
  openFoodFactsId String   @unique
  name            String
  brand           String?
  caloriesPer100g Float?
  proteinPer100g  Float?
  carbsPer100g    Float?
  fatPer100g      Float?
  fiberPer100g    Float?
  productData     Json
  lastUpdated     DateTime @default(now())
  createdAt       DateTime @default(now())

  @@index([name])
  @@index([lastUpdated])
}

// USDA FoodData Central local data storage
model USDAFood {
  id              String    @id @default(uuid())
  fdcId           Int       @unique
  description     String
  dataType        String // Foundation Foods, SR Legacy, etc.
  foodCategory    String?
  brandOwner      String?
  brandName       String?
  ingredients     String?
  servingSize     Float?
  servingSizeUnit String?
  publishedDate   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Nutrition data per 100g
  caloriesPer100g Float?
  proteinPer100g  Float?
  carbsPer100g    Float?
  fatPer100g      Float?
  fiberPer100g    Float?
  sugarPer100g    Float?
  sodiumPer100g   Float?

  // Additional key nutrients
  calciumPer100g   Float?
  ironPer100g      Float?
  potassiumPer100g Float?
  vitaminCPer100g  Float?

  @@index([description], map: "usda_food_description_idx")
  @@index([dataType], map: "usda_food_data_type_idx")
  @@index([foodCategory], map: "usda_food_category_idx")
  @@index([fdcId], map: "usda_food_fdc_id_idx")
  // Performance optimization indexes
  @@index([dataType, description], map: "usda_food_search_quality_idx")
  @@index([caloriesPer100g, proteinPer100g, carbsPer100g, fatPer100g], map: "usda_nutrition_filter_idx")
}

// OpenFoodFacts local data storage
model OpenFoodFactsProduct {
  id          String  @id @default(uuid())
  code        String  @unique // Barcode/product code
  productName String // Product name
  brands      String? // Brand names (comma separated)
  categories  String? // Categories (comma separated)
  origins     String? // Origins/countries of ingredients
  countries   String? // Countries where sold
  labels      String? // Labels (organic, fair trade, etc.)
  packaging   String? // Packaging information
  ingredients String? // Ingredients list
  allergens   String? // Allergen information
  traces      String? // May contain traces of...

  // Serving information
  servingSize     String? // Serving size text
  servingQuantity Float? // Serving quantity number

  // Nutrition data per 100g (matching OpenFoodFacts field names)
  energyKcal100g    Float? // energy-kcal_100g
  proteins100g      Float? // proteins_100g  
  carbohydrates100g Float? // carbohydrates_100g
  fat100g           Float? // fat_100g
  fiber100g         Float? // fiber_100g
  sugars100g        Float? // sugars_100g
  salt100g          Float? // salt_100g (note: OpenFoodFacts uses salt, not sodium)

  // Additional key nutrients
  saturatedFat100g Float? // saturated-fat_100g
  sodium100g       Float? // Calculated from salt (salt_100g * 0.4)

  // Quality indicators
  nutriScore String? // Nutri-Score grade (A, B, C, D, E)
  novaGroup  Int? // NOVA group (1-4)
  ecoScore   String? // Eco-Score grade

  // Data quality
  completeness Float? // Data completeness score
  lastModified DateTime? // Last modification date from OpenFoodFacts
  scansN       Int? // Number of scans (popularity indicator)
  uniqueScansN Int? // Number of unique scans

  // Images
  imageUrl            String? // Main product image
  imageFrontUrl       String? // Front image
  imageIngredientsUrl String? // Ingredients image
  imageNutritionUrl   String? // Nutrition facts image

  // Administrative
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  importedAt DateTime @default(now()) // When this record was imported to our DB

  @@index([productName], map: "off_product_name_idx")
  @@index([brands], map: "off_brands_idx")
  @@index([categories], map: "off_categories_idx")
  @@index([countries], map: "off_countries_idx")
  @@index([code], map: "off_code_idx")
  @@index([nutriScore], map: "off_nutri_score_idx")
  @@index([lastModified], map: "off_last_modified_idx")
  @@index([scansN], map: "off_scans_idx")
  @@index([completeness], map: "off_completeness_idx")
  // Performance optimization indexes
  @@index([completeness(sort: Desc), scansN(sort: Desc), productName], map: "off_search_quality_idx")
  @@index([energyKcal100g, proteins100g, carbohydrates100g, fat100g], map: "off_nutrition_filter_idx")
  @@index([countries, productName], map: "off_country_search_idx")
  // Fast search index for common product name searches with nutrition filter
  @@index([productName, energyKcal100g], map: "off_fast_search_idx")
  @@index([productName, proteins100g], map: "off_protein_search_idx")
}

// Favourite Workout Models
model FavouriteWorkout {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  createdBy   User     @relation("CreatedFavouriteWorkouts", fields: [createdById], references: [id])
  exercises   FavouriteWorkoutExercise[]
  
  @@index([createdById])
}

model FavouriteWorkoutExercise {
  id                     String            @id @default(uuid())
  name                   String
  order                  Int
  baseId                 String?
  favouriteWorkoutId     String
  restSeconds            Int?
  instructions           String?
  
  base                   BaseExercise?     @relation(fields: [baseId], references: [id])
  favouriteWorkout       FavouriteWorkout  @relation(fields: [favouriteWorkoutId], references: [id], onDelete: Cascade)
  sets                   FavouriteWorkoutSet[]
  
  @@index([favouriteWorkoutId])
  @@index([baseId])
}

model FavouriteWorkoutSet {
  id          String   @id @default(uuid())
  order       Int
  reps        Int?
  minReps     Int?
  maxReps     Int?
  weight      Float?
  rpe         Int?
  exerciseId  String
  
  exercise    FavouriteWorkoutExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  
  @@index([exerciseId])
}
