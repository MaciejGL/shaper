// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  image     String?
  role      String   @default("CLIENT") // Enum: CLIENT, TRAINER, ADMIN
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile              UserProfile?
  trainer              User?             @relation("TrainerClients", fields: [trainerId], references: [id])
  trainerId            String?
  clients              User[]            @relation("TrainerClients")
  sentRequests         CoachingRequest[] @relation("SentRequests")
  receivedRequests     CoachingRequest[] @relation("ReceivedRequests")
  notifications        Notification[]
  createdNotifications Notification[]    @relation("NotificationCreator")

  createdNotes Note[] @relation("CreatedNotes")

  sessions              UserSession[]
  assignedPlans         TrainingPlan[]             @relation("AssignedPlans")
  createdPlans          TrainingPlan[]             @relation("CreatedPlans")
  exerciseLogs          ExerciseLog[]
  BaseExercise          BaseExercise[]
  exerciseSubstitutions UserExerciseSubstitution[]
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserProfile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  firstName    String?
  lastName     String?
  phone        String?
  birthday     DateTime?
  sex          String? // Enum: MALE, FEMALE, OTHER
  avatarUrl    String?
  height       Float? // cm
  weight       Float? // kg
  fitnessLevel String? // Enum: BEGINNER, INTERMEDIATE, ADVANCED, EXPERT
  allergies    String?

  activityLevel String? // Enum: SEDENTARY, LIGHT, MODERATE, ACTIVE, ATHLETE
  goals         String[] // Enum: LOSE_FAT, MAINTAIN, BUILD_MUSCLE
  bio           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bodyMeasures UserBodyMeasure[]
}

model UserBodyMeasure {
  id            String      @id @default(uuid())
  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  measuredAt DateTime @default(now())

  weight Float? // kg
  height Float? // cm

  // Chest and waist are typically measured as a single value
  chest Float?
  waist Float?
  hips  Float?
  neck  Float?

  // Add left/right for body parts that are commonly measured separately
  bicepsLeft  Float?
  bicepsRight Float?
  thighLeft   Float?
  thighRight  Float?
  calfLeft    Float?
  calfRight   Float?

  bodyFat Float? // %

  notes String? // e.g., ‚Äúafter leg day‚Äù, ‚Äúfasted‚Äù, etc.

  @@index([userProfileId])
}

model CoachingRequest {
  id          String   @id @default(uuid())
  senderId    String
  recipientId String
  status      String   @default("PENDING") // Enum: PENDING, APPROVED, REJECTED, CANCELLED
  message     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sender    User @relation("SentRequests", fields: [senderId], references: [id])
  recipient User @relation("ReceivedRequests", fields: [recipientId], references: [id])

  @@index([senderId])
  @@index([recipientId])
}

model Notification {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  createdBy     String?
  creator       User?    @relation("NotificationCreator", fields: [createdBy], references: [id])
  message       String
  type          String
  read          Boolean  @default(false)
  link          String?
  metadata      Json?
  relatedItemId String?
  createdAt     DateTime @default(now())

  @@index([userId])
  @@index([createdBy])
  @@index([userId, read])
  @@index([userId, createdAt])
}

model TrainingPlan {
  id          String    @id @default(uuid())
  title       String
  description String?
  createdById String
  isPublic    Boolean   @default(false)
  isTemplate  Boolean   @default(false)
  isDraft     Boolean   @default(true)
  templateId  String?
  completedAt DateTime?

  active    Boolean   @default(false)
  startDate DateTime?
  endDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy    User           @relation("CreatedPlans", fields: [createdById], references: [id])
  assignedTo   User?          @relation("AssignedPlans", fields: [assignedToId], references: [id])
  assignedToId String?
  weeks        TrainingWeek[]
  template     TrainingPlan?  @relation("Template", fields: [templateId], references: [id])
  templates    TrainingPlan[] @relation("Template")

  @@index([completedAt])
}

model TrainingWeek {
  id          String    @id @default(uuid())
  planId      String
  weekNumber  Int
  name        String
  description String?
  completedAt DateTime?

  plan TrainingPlan  @relation(fields: [planId], references: [id], onDelete: Cascade)
  days TrainingDay[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([completedAt])
}

model TrainingDay {
  id          String    @id @default(uuid())
  weekId      String
  dayOfWeek   Int // 0 = Sunday, 1 = Monday, etc.
  completedAt DateTime?
  workoutType String?
  isRestDay   Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  week      TrainingWeek       @relation(fields: [weekId], references: [id], onDelete: Cascade)
  exercises TrainingExercise[]

  @@index([completedAt])
}

model TrainingExercise {
  id   String @id @default(uuid())
  name String // can override base

  restSeconds  Int?
  tempo        String?
  warmupSets   Int?
  instructions String?
  order        Int
  completedAt  DateTime?

  sets                   ExerciseSet[]
  baseId                 String? // üëà link to the base exercise
  base                   BaseExercise?                @relation(fields: [baseId], references: [id])
  dayId                  String
  day                    TrainingDay                  @relation(fields: [dayId], references: [id], onDelete: Cascade)
  logs                   ExerciseLog[]
  substitutionOptions    ExerciseSubstitutionOption[] @relation("OriginalExercise") // Options for this exercise
  substitutionsFor       ExerciseSubstitutionOption[] @relation("SubstituteExercise") // Used as an option elsewhere
  userExerciseOverrides  UserExerciseSubstitution[]   @relation("UserExerciseOriginal")
  userExerciseSelections UserExerciseSubstitution[]   @relation("UserExerciseSelected")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([dayId])
  @@index([baseId])
  @@index([completedAt])
}

model ExerciseSet {
  id         String           @id @default(uuid())
  order      Int
  reps       Int?
  minReps    Int?
  maxReps    Int?
  weight     Float?
  rpe        Int?
  exerciseId String
  exercise   TrainingExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  log   ExerciseSetLog? @relation(fields: [logId], references: [id], onDelete: Cascade)
  logId String?         @unique // ‚¨ÖÔ∏è enforces only one log per set

  @@index([exerciseId])
  @@index([completedAt])
}

model ExerciseLog {
  id          String   @id @default(uuid())
  performedAt DateTime @default(now())
  notes       String?

  userId     String
  user       User             @relation(fields: [userId], references: [id])
  exerciseId String
  exercise   TrainingExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExerciseSetLog {
  id String @id @default(uuid())

  reps   Int?
  weight Float?
  rpe    Int?

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ExerciseSet ExerciseSet?
}

model BaseExercise {
  id          String  @id @default(uuid())
  name        String
  description String?
  videoUrl    String?
  equipment   String? // e.g., BARBELL, DUMBBELL, MACHINE

  createdById String? // null = system/public
  createdBy   User?   @relation(fields: [createdById], references: [id])
  isPublic    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  muscleGroups      MuscleGroup[]      @relation("ExerciseMuscleGroups")
  trainingExercises TrainingExercise[]
}

model ExerciseSubstitutionOption {
  id           String @id @default(uuid())
  originalId   String
  substituteId String

  original   TrainingExercise @relation("OriginalExercise", fields: [originalId], references: [id])
  substitute TrainingExercise @relation("SubstituteExercise", fields: [substituteId], references: [id])

  reason String?
}

model UserExerciseSubstitution {
  id         String @id @default(uuid())
  userId     String
  exerciseId String
  selectedId String

  user     User             @relation(fields: [userId], references: [id])
  exercise TrainingExercise @relation("UserExerciseOriginal", fields: [exerciseId], references: [id])
  selected TrainingExercise @relation("UserExerciseSelected", fields: [selectedId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, exerciseId]) // One override per exercise per user
}

model MuscleGroup {
  id        String  @id @default(uuid())
  name      String  @unique // "Biceps brachii"
  alias     String? // "Biceps"
  groupSlug String // e.g. "arms"
  isPrimary Boolean @default(true) // Used for grouping in filters

  createdAt  DateTime            @default(now())
  category   MuscleGroupCategory @relation(fields: [categoryId], references: [id])
  categoryId String

  exercises BaseExercise[] @relation("ExerciseMuscleGroups")
}

model MuscleGroupCategory {
  id        String   @id @default(uuid())
  name      String   @unique // e.g. "Shoulders", "Chest", "Back"
  slug      String   @unique
  createdAt DateTime @default(now())

  muscles MuscleGroup[]
}

model Note {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Who created the note
  createdById String
  createdBy   User   @relation("CreatedNotes", fields: [createdById], references: [id])

  // Optional relation to a user (e.g., trainer notes about a client)
  relatedToId String?
  metadata    Json? // For any additional structured data

  @@index([createdById])
  @@index([relatedToId])
}
