generator client {
  provider        = "prisma-client"
  output          = "../src/generated/prisma"
  previewFeatures = ["driverAdapters", "queryCompiler"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String               @id @default(uuid())
  email                    String               @unique
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  image                    String?
  name                     String?
  role                     String               @default("CLIENT")
  trainerId                String?
  featured                 Boolean              @default(false)
  stripeCustomerId         String?              @unique
  stripeConnectedAccountId String?              @unique
  capacity                 Int?
  googleAccessToken        String?
  googleId                 String?              @unique
  googleRefreshToken       String?
  locale                   String?
  timezone                 String?
  appleId                  String?              @unique
  BaseExercise             BaseExercise[]
  clientChats              Chat[]               @relation("ClientChats")
  trainerChats             Chat[]               @relation("TrainerChats")
  clientSurvey             ClientSurvey?
  receivedRequests         CoachingRequest[]    @relation("ReceivedRequests")
  sentRequests             CoachingRequest[]    @relation("SentRequests")
  exerciseLogs             ExerciseLog[]
  createdFavouriteWorkouts FavouriteWorkout[]   @relation("CreatedFavouriteWorkouts")
  createdIngredients       Ingredient[]         @relation("CreatedIngredients")
  macroTargets             MacroTarget?         @relation("ClientMacroTargets")
  setMacroTargets          MacroTarget[]        @relation("TrainerMacroTargets")
  createdMeals             Meal[]               @relation("CreatedMeals")
  coachMeetings            Meeting[]            @relation("CoachMeetings")
  traineeMeetings          Meeting[]            @relation("TraineeMeetings")
  sentMessages             Message[]            @relation("SentMessages")
  mobilePushTokens         MobilePushToken[]
  createdNotes             Note[]               @relation("CreatedNotes")
  createdNotifications     Notification[]       @relation("NotificationCreator")
  notifications            Notification[]
  assignedNutritionPlans   NutritionPlan[]      @relation("ClientNutritionPlans")
  createdNutritionPlans    NutritionPlan[]      @relation("TrainerNutritionPlans")
  trainerPackages          PackageTemplate[]    @relation("TrainerPackages")
  personalRecords          PersonalRecord[]
  pushSubscriptions        PushSubscription[]
  remindersSent            ReminderSent[]
  reviews                  Review[]
  clientDeliveries         ServiceDelivery[]    @relation("ClientDeliveries")
  trainerDeliveries        ServiceDelivery[]    @relation("TrainerDeliveries")
  sentTeamInvitations      TeamInvitation[]     @relation("SentTeamInvitations")
  teamMemberships          TeamMember[]
  sentOffers               TrainerOffer[]       @relation("TrainerOffers")
  assignedPlans            TrainingPlan[]       @relation("AssignedPlans")
  createdPlans             TrainingPlan[]       @relation("CreatedPlans")
  trainer                  User?                @relation("TrainerClients", fields: [trainerId], references: [id])
  clients                  User[]               @relation("TrainerClients")
  locations                UserLocation[]
  profile                  UserProfile?
  sessions                 UserSession[]
  clientSubscriptions      UserSubscription[]   @relation("TrainerSubscriptions")
  subscriptions            UserSubscription[]   @relation("UserSubscriptions")
  termsAgreements          UserTermsAgreement[]

  @@index([trainerId])
  @@index([stripeCustomerId])
  @@index([trainerId, role])
  @@index([googleId])
  @@index([appleId])
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserProfile {
  id                     String            @id @default(uuid())
  userId                 String            @unique
  firstName              String?
  lastName               String?
  phone                  String?
  birthday               DateTime?
  sex                    String?
  avatarUrl              String?
  activityLevel          String?
  bio                    String?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  allergies              String?
  fitnessLevel           String?
  height                 Float?
  weight                 Float?
  goals                  String[]
  weekStartsOn           Int?              @default(1)
  emailNotifications     Boolean?          @default(true)
  heightUnit             String?           @default("cm")
  progressUpdates        Boolean?          @default(true)
  pushNotifications      Boolean?          @default(false)
  systemNotifications    Boolean?          @default(true)
  theme                  String?           @default("system")
  timeFormat             String?           @default("24h")
  weightUnit             String?           @default("kg")
  workoutReminders       Boolean?          @default(true)
  trainingView           String?           @default("advanced")
  credentials            String[]          @default([])
  specialization         String[]          @default([])
  successStories         String[]          @default([])
  trainerSince           DateTime?
  hasCompletedOnboarding Boolean?          @default(false)
  checkinReminders       Boolean?          @default(true)
  timezone               String?           @default("UTC")
  blurProgressSnapshots  Boolean?          @default(false)
  bodyProgressLogs       BodyProgressLog[]
  checkinSchedule        CheckinSchedule?
  bodyMeasures           UserBodyMeasure[]
  user                   User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserBodyMeasure {
  id                 String              @id @default(uuid())
  userProfileId      String
  measuredAt         DateTime            @default(now())
  weight             Float?
  height             Float?
  chest              Float?
  waist              Float?
  hips               Float?
  neck               Float?
  bodyFat            Float?
  notes              String?
  bicepsLeft         Float?
  bicepsRight        Float?
  calfLeft           Float?
  calfRight          Float?
  thighLeft          Float?
  thighRight         Float?
  checkinCompletions CheckinCompletion[]
  userProfile        UserProfile         @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@index([userProfileId])
}

model BodyProgressLog {
  id                 String              @id @default(uuid())
  userProfileId      String
  loggedAt           DateTime            @default(now())
  notes              String?
  image1Url          String?
  image2Url          String?
  image3Url          String?
  shareWithTrainer   Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userProfile        UserProfile         @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  checkinCompletions CheckinCompletion[]

  @@index([userProfileId])
  @@index([userProfileId, loggedAt])
}

model CheckinSchedule {
  id            String              @id @default(uuid())
  userProfileId String              @unique
  frequency     String
  dayOfWeek     Int?
  dayOfMonth    Int?
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  completions   CheckinCompletion[]
  userProfile   UserProfile         @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@index([userProfileId])
  @@index([isActive])
}

model CheckinCompletion {
  id            String           @id @default(uuid())
  scheduleId    String
  completedAt   DateTime         @default(now())
  measurementId String?
  progressLogId String?
  measurement   UserBodyMeasure? @relation(fields: [measurementId], references: [id])
  progressLog   BodyProgressLog? @relation(fields: [progressLogId], references: [id])
  schedule      CheckinSchedule  @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([scheduleId])
  @@index([completedAt])
}

model CoachingRequest {
  id                 String   @id @default(uuid())
  senderId           String
  recipientId        String
  status             String   @default("PENDING")
  message            String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  interestedServices String[] @default([])
  recipient          User     @relation("ReceivedRequests", fields: [recipientId], references: [id])
  sender             User     @relation("SentRequests", fields: [senderId], references: [id])

  @@index([senderId])
  @@index([recipientId])
}

model Notification {
  id            String   @id @default(uuid())
  userId        String
  createdBy     String?
  message       String
  type          String
  read          Boolean  @default(false)
  link          String?
  metadata      Json?
  createdAt     DateTime @default(now())
  relatedItemId String?
  creator       User?    @relation("NotificationCreator", fields: [createdBy], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdBy])
  @@index([userId, read])
  @@index([userId, createdAt])
}

model PushSubscription {
  id        String   @id @default(uuid())
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([endpoint])
}

model MobilePushToken {
  id                       String   @id @default(uuid())
  userId                   String?
  expoPushToken            String   @unique
  platform                 String
  deviceInfo               String?
  pushNotificationsEnabled Boolean  @default(true)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  lastActiveAt             DateTime @default(now())
  user                     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expoPushToken])
  @@index([pushNotificationsEnabled])
}

model TrainingPlan {
  id           String         @id @default(uuid())
  title        String
  description  String?
  createdById  String
  isPublic     Boolean        @default(false)
  isTemplate   Boolean        @default(false)
  templateId   String?
  completedAt  DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  assignedToId String?
  isDraft      Boolean        @default(true)
  active       Boolean        @default(false)
  endDate      DateTime?
  startDate    DateTime?
  difficulty   String?
  focusTags    String[]
  premium      Boolean        @default(false)
  targetGoals  String[]
  reviews      Review[]
  assignedTo   User?          @relation("AssignedPlans", fields: [assignedToId], references: [id])
  createdBy    User           @relation("CreatedPlans", fields: [createdById], references: [id])
  template     TrainingPlan?  @relation("Template", fields: [templateId], references: [id])
  templates    TrainingPlan[] @relation("Template")
  weeks        TrainingWeek[]

  @@index([completedAt])
  @@index([assignedToId])
  @@index([assignedToId, active])
  @@index([assignedToId, createdById])
  @@index([createdById])
  @@index([active])
  @@index([templateId])
}

model TrainingWeek {
  id          String        @id @default(uuid())
  planId      String
  weekNumber  Int
  completedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  description String?
  name        String
  scheduledAt DateTime?
  isExtra     Boolean       @default(false)
  days        TrainingDay[]
  plan        TrainingPlan  @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([completedAt])
  @@index([planId])
  @@index([planId, weekNumber])
}

model TrainingDay {
  id              String                @id @default(uuid())
  weekId          String
  dayOfWeek       Int
  completedAt     DateTime?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  isRestDay       Boolean               @default(false)
  workoutType     String?
  scheduledAt     DateTime?
  isExtra         Boolean               @default(false)
  personalRecords PersonalRecord[]
  week            TrainingWeek          @relation(fields: [weekId], references: [id], onDelete: Cascade)
  exercises       TrainingExercise[]
  events          WorkoutSessionEvent[]

  @@index([completedAt])
  @@index([weekId])
  @@index([weekId, dayOfWeek])
  @@index([scheduledAt])
  @@index([weekId, scheduledAt])
}

model TrainingExercise {
  id                     String            @id @default(uuid())
  name                   String
  restSeconds            Int?
  tempo                  String?
  description            String?
  order                  Int
  baseId                 String?
  dayId                  String
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  warmupSets             Int?
  completedAt            DateTime?
  additionalInstructions String?
  type                   String?
  isExtra                Boolean           @default(false)
  substitutedById        String?           @unique
  difficulty             String?
  instructions           String[]
  tips                   String[]
  logs                   ExerciseLog[]
  sets                   ExerciseSet[]
  base                   BaseExercise?     @relation(fields: [baseId], references: [id])
  day                    TrainingDay       @relation(fields: [dayId], references: [id], onDelete: Cascade)
  substitutedBy          TrainingExercise? @relation("ReplacedBy", fields: [substitutedById], references: [id])
  substitutes            TrainingExercise? @relation("ReplacedBy")

  @@index([dayId])
  @@index([baseId])
  @@index([completedAt])
  @@index([dayId, completedAt])
  @@index([dayId, order])
  @@index([baseId, dayId])
  @@index([substitutedById])
  @@index([name, completedAt])
  @@index([dayId, name, completedAt])
  @@index([name, dayId])
  @@index([baseId, completedAt])
}

model ExerciseSet {
  id          String           @id @default(uuid())
  order       Int
  reps        Int?
  weight      Float?
  exerciseId  String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  rpe         Int?
  maxReps     Int?
  minReps     Int?
  completedAt DateTime?
  logId       String?          @unique
  isExtra     Boolean          @default(false)
  exercise    TrainingExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  log         ExerciseSetLog?  @relation(fields: [logId], references: [id], onDelete: Cascade)

  @@index([exerciseId])
  @@index([completedAt])
  @@index([exerciseId, order])
  @@index([exerciseId, completedAt])
}

model ExerciseLog {
  id          String           @id @default(uuid())
  performedAt DateTime         @default(now())
  notes       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userId      String
  exerciseId  String
  exercise    TrainingExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  user        User             @relation(fields: [userId], references: [id])

  @@index([exerciseId])
  @@index([userId])
}

model ExerciseSetLog {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  reps        Int?
  weight      Float?
  rpe         Int?
  ExerciseSet ExerciseSet?
}

model PersonalRecord {
  id             String       @id @default(uuid())
  userId         String
  baseExerciseId String
  estimated1RM   Float
  weight         Float
  reps           Int
  achievedAt     DateTime     @default(now())
  createdAt      DateTime     @default(now())
  dayId          String
  baseExercise   BaseExercise @relation(fields: [baseExerciseId], references: [id])
  day            TrainingDay  @relation(fields: [dayId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, baseExerciseId, dayId])
  @@index([userId])
  @@index([baseExerciseId])
  @@index([userId, baseExerciseId])
  @@index([userId, baseExerciseId, estimated1RM])
}

model BaseExercise {
  id                        String                     @id @default(uuid())
  name                      String
  description               String?
  videoUrl                  String?
  equipment                 String?
  createdById               String?
  isPublic                  Boolean                    @default(false)
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  additionalInstructions    String?
  type                      String?
  difficulty                String?
  version                   Int                        @default(1)
  isPremium                 Boolean                    @default(false)
  verified                  Boolean                    @default(false)
  instructions              String[]
  tips                      String[]
  createdBy                 User?                      @relation(fields: [createdById], references: [id])
  substitutes               BaseExerciseSubstitute[]   @relation("OriginalExercise")
  substitutedBy             BaseExerciseSubstitute[]   @relation("SubstituteExercise")
  favouriteWorkoutExercises FavouriteWorkoutExercise[]
  images                    Image[]                    @relation("ExerciseImages")
  personalRecords           PersonalRecord[]
  trainingExercises         TrainingExercise[]
  muscleGroups              MuscleGroup[]              @relation("ExerciseMuscleGroups")
  secondaryMuscleGroups     MuscleGroup[]              @relation("ExerciseSecondaryMuscleGroups")

  @@index([version])
  @@index([difficulty])
  @@index([isPremium])
  @@index([verified])
  @@index([createdById])
  @@index([isPublic])
  @@index([isPublic, isPremium])
}

model Image {
  id         String       @id @default(uuid())
  url        String
  order      Int          @default(0)
  entityType String
  entityId   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  large      String?
  medium     String?
  thumbnail  String?
  exercise   BaseExercise @relation("ExerciseImages", fields: [entityId], references: [id], map: "exercise_image_fk")

  @@index([entityType, entityId])
  @@index([order])
  @@index([entityId])
  @@index([entityType, entityId, order])
}

model MuscleGroup {
  id                 String              @id @default(uuid())
  name               String              @unique
  alias              String?
  groupSlug          String
  isPrimary          Boolean             @default(true)
  createdAt          DateTime            @default(now())
  categoryId         String
  category           MuscleGroupCategory @relation(fields: [categoryId], references: [id])
  exercises          BaseExercise[]      @relation("ExerciseMuscleGroups")
  secondaryExercises BaseExercise[]      @relation("ExerciseSecondaryMuscleGroups")

  @@index([categoryId])
}

model MuscleGroupCategory {
  id        String        @id @default(uuid())
  name      String        @unique
  slug      String        @unique
  createdAt DateTime      @default(now())
  muscles   MuscleGroup[]
}

model Note {
  id          String   @id @default(uuid())
  text        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  relatedToId String?
  metadata    Json?
  createdBy   User     @relation("CreatedNotes", fields: [createdById], references: [id])

  @@index([createdById])
  @@index([relatedToId])
}

model WorkoutSessionEvent {
  id            String      @id @default(cuid())
  dayId         String
  type          String
  timestamp     DateTime    @default(now())
  createdAt     DateTime    @default(now())
  totalDuration Int         @default(0)
  day           TrainingDay @relation(fields: [dayId], references: [id], onDelete: Cascade)

  @@index([dayId])
}

model Review {
  id             String       @id @default(uuid())
  trainingPlanId String
  rating         Int
  comment        String?
  createdById    String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isEdited       Boolean      @default(false)
  isHidden       Boolean      @default(false)
  flagged        Boolean      @default(false)
  flagReason     String?
  createdBy      User         @relation(fields: [createdById], references: [id])
  trainingPlan   TrainingPlan @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)

  @@index([trainingPlanId])
  @@index([createdById])
  @@index([isHidden])
  @@index([flagged])
}

model BaseExerciseSubstitute {
  id           String       @id @default(uuid())
  originalId   String
  substituteId String
  reason       String?
  createdAt    DateTime     @default(now())
  original     BaseExercise @relation("OriginalExercise", fields: [originalId], references: [id], onDelete: Cascade)
  substitute   BaseExercise @relation("SubstituteExercise", fields: [substituteId], references: [id], onDelete: Cascade)

  @@unique([originalId, substituteId])
  @@index([originalId])
  @@index([substituteId])
}

model FavouriteWorkout {
  id          String                     @id @default(uuid())
  title       String
  description String?
  createdById String
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
  createdBy   User                       @relation("CreatedFavouriteWorkouts", fields: [createdById], references: [id])
  exercises   FavouriteWorkoutExercise[]

  @@index([createdById])
}

model FavouriteWorkoutExercise {
  id                     String                @id @default(uuid())
  name                   String
  order                  Int
  baseId                 String?
  favouriteWorkoutId     String
  restSeconds            Int?
  additionalInstructions String?
  description            String?
  difficulty             String?
  tips                   String[]
  instructions           String[]
  base                   BaseExercise?         @relation(fields: [baseId], references: [id])
  favouriteWorkout       FavouriteWorkout      @relation(fields: [favouriteWorkoutId], references: [id], onDelete: Cascade)
  sets                   FavouriteWorkoutSet[]

  @@index([favouriteWorkoutId])
  @@index([baseId])
}

model FavouriteWorkoutSet {
  id         String                   @id @default(uuid())
  order      Int
  reps       Int?
  minReps    Int?
  maxReps    Int?
  weight     Float?
  rpe        Int?
  exerciseId String
  exercise   FavouriteWorkoutExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@index([exerciseId])
}

model PackageTemplate {
  id              String               @id @default(uuid())
  name            String
  description     String?
  duration        SubscriptionDuration
  isActive        Boolean              @default(true)
  trainerId       String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  stripeProductId String?
  stripeLookupKey String?
  metadata        Json?
  trainer         User?                @relation("TrainerPackages", fields: [trainerId], references: [id])
  subscriptions   UserSubscription[]

  @@index([trainerId])
  @@index([isActive])
  @@index([duration])
  @@index([stripeProductId])
  @@index([metadata], type: Gin)
  @@index([stripeLookupKey])
}

model UserSubscription {
  id                   String             @id @default(uuid())
  userId               String
  packageId            String
  trainerId            String?
  status               SubscriptionStatus @default(ACTIVE)
  startDate            DateTime
  endDate              DateTime
  stripeSubscriptionId String?
  stripeLookupKey      String?
  mockPaymentStatus    String?            @default("COMPLETED")
  mockTransactionId    String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  failedPaymentRetries Int                @default(0)
  gracePeriodEnd       DateTime?
  isInGracePeriod      Boolean            @default(false)
  isTrialActive        Boolean            @default(false)
  lastPaymentAttempt   DateTime?
  trialEnd             DateTime?
  trialStart           DateTime?
  package              PackageTemplate    @relation(fields: [packageId], references: [id])
  trainer              User?              @relation("TrainerSubscriptions", fields: [trainerId], references: [id])
  user                 User               @relation("UserSubscriptions", fields: [userId], references: [id])

  @@index([userId])
  @@index([trainerId])
  @@index([status])
  @@index([endDate])
  @@index([startDate])
  @@index([trialEnd])
  @@index([gracePeriodEnd])
  @@index([isTrialActive])
  @@index([isInGracePeriod])
}

model TrainerOffer {
  id                      String    @id @default(uuid())
  token                   String    @unique
  trainerId               String
  clientEmail             String
  personalMessage         String?
  status                  String    @default("PENDING")
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  expiresAt               DateTime
  completedAt             DateTime?
  packageSummary          Json?
  stripeCheckoutSessionId String?   @unique
  stripePaymentIntentId   String?   @unique
  trainer                 User      @relation("TrainerOffers", fields: [trainerId], references: [id])

  @@index([token])
  @@index([trainerId])
  @@index([clientEmail])
  @@index([status])
  @@index([expiresAt])
  @@index([createdAt])
  @@index([stripeCheckoutSessionId])
  @@index([stripePaymentIntentId])
}

model ServiceDelivery {
  id                    String         @id @default(uuid())
  stripePaymentIntentId String
  trainerId             String
  clientId              String
  serviceType           ServiceType
  packageName           String
  quantity              Int            @default(1)
  status                DeliveryStatus @default(PENDING)
  deliveredAt           DateTime?
  deliveryNotes         String?
  metadata              Json?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  disputeStatus         String?
  disputedAt            DateTime?
  refundReason          String?
  refundedAt            DateTime?
  meetings              Meeting[]
  client                User           @relation("ClientDeliveries", fields: [clientId], references: [id])
  trainer               User           @relation("TrainerDeliveries", fields: [trainerId], references: [id])
  tasks                 ServiceTask[]

  @@index([trainerId])
  @@index([clientId])
  @@index([stripePaymentIntentId])
  @@index([status])
  @@index([serviceType])
  @@index([createdAt])
}

model ServiceTask {
  id                 String          @id @default(uuid())
  serviceDeliveryId  String
  templateId         String
  title              String
  taskType           String
  status             String          @default("PENDING")
  order              Int             @default(0)
  isRequired         Boolean         @default(true)
  completedAt        DateTime?
  notes              String?
  requiresScheduling Boolean         @default(false)
  scheduledAt        DateTime?
  estimatedDuration  Int?
  isRecurring        Boolean         @default(false)
  intervalDays       Int?
  recurrenceCount    Int?
  metadata           Json?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  meetings           Meeting[]
  serviceDelivery    ServiceDelivery @relation(fields: [serviceDeliveryId], references: [id], onDelete: Cascade)

  @@index([serviceDeliveryId])
  @@index([status])
  @@index([templateId])
  @@index([scheduledAt])
}

model Meeting {
  id                String           @id @default(uuid())
  coachId           String
  traineeId         String
  type              MeetingType
  status            MeetingStatus    @default(PENDING)
  scheduledAt       DateTime
  duration          Int
  timezone          String
  locationType      LocationType
  address           String?
  meetingLink       String?
  title             String
  description       String?
  notes             String?
  serviceDeliveryId String?
  serviceTaskId     String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  coach             User             @relation("CoachMeetings", fields: [coachId], references: [id])
  serviceDelivery   ServiceDelivery? @relation(fields: [serviceDeliveryId], references: [id])
  serviceTask       ServiceTask?     @relation(fields: [serviceTaskId], references: [id])
  trainee           User             @relation("TraineeMeetings", fields: [traineeId], references: [id])

  @@index([coachId, scheduledAt])
  @@index([traineeId, scheduledAt])
  @@index([status])
  @@index([serviceDeliveryId])
  @@index([serviceTaskId])
  @@index([scheduledAt, status])
}

model ReminderSent {
  id           String   @id @default(uuid())
  entityType   String
  entityId     String
  reminderType String
  userId       String
  sentAt       DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([entityType, entityId, reminderType, userId])
  @@index([entityType, entityId])
  @@index([userId])
  @@index([sentAt])
}

model Location {
  id          String         @id @default(uuid())
  city        String
  country     String
  countryCode String         @db.Char(2)
  teams       TeamLocation[]
  users       UserLocation[]

  @@unique([city, country])
  @@index([city])
}

model Team {
  id                       String           @id @default(uuid())
  name                     String
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  stripeConnectedAccountId String?          @unique
  stripeCustomerId         String?          @unique
  platformFeePercent       Float            @default(12)
  meals                    Meal[]
  invitations              TeamInvitation[]
  locations                TeamLocation[]
  members                  TeamMember[]
}

model TeamMember {
  id       String   @id @default(uuid())
  teamId   String
  userId   String
  role     String   @default("MEMBER")
  joinedAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
}

model TeamInvitation {
  id           String   @id @default(uuid())
  teamId       String
  invitedEmail String
  invitedById  String
  status       String   @default("PENDING")
  createdAt    DateTime @default(now())
  invitedBy    User     @relation("SentTeamInvitations", fields: [invitedById], references: [id])
  team         Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, invitedEmail])
  @@index([teamId])
  @@index([invitedEmail])
  @@index([invitedById])
}

model UserLocation {
  id         String   @id @default(uuid())
  userId     String
  locationId String
  createdAt  DateTime @default(now())
  location   Location @relation(fields: [locationId], references: [id])
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, locationId])
  @@index([userId])
  @@index([locationId])
}

model TeamLocation {
  id         String   @id @default(uuid())
  teamId     String
  locationId String
  createdAt  DateTime @default(now())
  location   Location @relation(fields: [locationId], references: [id])
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, locationId])
  @@index([teamId])
  @@index([locationId])
}

model UserTermsAgreement {
  id       String   @id @default(uuid())
  userId   String
  version  String
  offerId  String?
  agreedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([version])
  @@index([agreedAt])
}

model Chat {
  id        String    @id @default(uuid())
  trainerId String
  clientId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  client    User      @relation("ClientChats", fields: [clientId], references: [id])
  trainer   User      @relation("TrainerChats", fields: [trainerId], references: [id])
  messages  Message[]

  @@unique([trainerId, clientId])
  @@index([trainerId])
  @@index([clientId])
}

model Message {
  id        String    @id @default(uuid())
  chatId    String
  senderId  String
  content   String
  imageUrl  String?
  isEdited  Boolean   @default(false)
  isDeleted Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  chat      Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    User      @relation("SentMessages", fields: [senderId], references: [id])

  @@index([chatId])
  @@index([senderId])
  @@index([createdAt])
  @@index([chatId, senderId, readAt])
  @@index([chatId, createdAt(sort: Desc)])
  @@index([senderId, readAt])
}

model MacroTarget {
  id        String   @id @default(uuid())
  clientId  String   @unique
  trainerId String
  calories  Int?
  protein   Float?
  carbs     Float?
  fat       Float?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    User     @relation("ClientMacroTargets", fields: [clientId], references: [id], onDelete: Cascade)
  trainer   User     @relation("TrainerMacroTargets", fields: [trainerId], references: [id])

  @@index([clientId])
  @@index([trainerId])
}

model NutritionPlan {
  id                 String             @id @default(uuid())
  name               String
  description        String?
  trainerId          String
  clientId           String
  isSharedWithClient Boolean            @default(false)
  sharedAt           DateTime?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  client             User               @relation("ClientNutritionPlans", fields: [clientId], references: [id], onDelete: Cascade)
  trainer            User               @relation("TrainerNutritionPlans", fields: [trainerId], references: [id], onDelete: Cascade)
  days               NutritionPlanDay[]

  @@index([trainerId, clientId])
  @@index([trainerId, isSharedWithClient])
  @@index([clientId, isSharedWithClient])
  @@index([trainerId, clientId, isSharedWithClient])
  @@index([sharedAt])
  @@index([updatedAt])
}

model NutritionPlanDay {
  id              String              @id @default(uuid())
  nutritionPlanId String
  dayNumber       Int
  name            String
  createdAt       DateTime            @default(now())
  nutritionPlan   NutritionPlan       @relation(fields: [nutritionPlanId], references: [id], onDelete: Cascade)
  meals           NutritionPlanMeal[]

  @@unique([nutritionPlanId, dayNumber])
  @@index([nutritionPlanId, dayNumber])
}

model Meal {
  id              String              @id @default(uuid())
  name            String
  description     String?
  instructions    String[]            @default([])
  preparationTime Int?
  cookingTime     Int?
  servings        Int?
  archived        Boolean             @default(false)
  createdById     String
  teamId          String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  createdBy       User                @relation("CreatedMeals", fields: [createdById], references: [id])
  team            Team?               @relation(fields: [teamId], references: [id])
  ingredients     MealIngredient[]
  planMeals       NutritionPlanMeal[]

  @@index([teamId, createdAt])
  @@index([teamId, name])
  @@index([createdById, createdAt])
  @@index([teamId, name, createdAt])
  @@index([teamId, archived])
}

model Ingredient {
  id              String           @id @default(uuid())
  name            String
  proteinPer100g  Float            @default(0)
  carbsPer100g    Float            @default(0)
  fatPer100g      Float            @default(0)
  caloriesPer100g Float            @default(0)
  createdById     String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdBy       User             @relation("CreatedIngredients", fields: [createdById], references: [id])
  mealIngredients MealIngredient[]

  @@index([createdById, createdAt])
  @@index([name])
}

model MealIngredient {
  id            String                        @id @default(uuid())
  mealId        String
  ingredientId  String
  grams         Float
  orderIndex    Int                           @default(0)
  createdAt     DateTime                      @default(now())
  ingredient    Ingredient                    @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  meal          Meal                          @relation(fields: [mealId], references: [id], onDelete: Cascade)
  planOverrides NutritionPlanMealIngredient[]

  @@unique([mealId, ingredientId])
  @@index([mealId, orderIndex])
  @@index([ingredientId])
  @@index([mealId])
}

model NutritionPlanMeal {
  id                  String                        @id @default(uuid())
  nutritionPlanDayId  String
  mealId              String
  orderIndex          Int                           @default(0)
  createdAt           DateTime                      @default(now())
  meal                Meal                          @relation(fields: [mealId], references: [id], onDelete: Cascade)
  nutritionPlanDay    NutritionPlanDay              @relation(fields: [nutritionPlanDayId], references: [id], onDelete: Cascade)
  ingredientOverrides NutritionPlanMealIngredient[]

  @@index([nutritionPlanDayId, orderIndex])
  @@index([mealId])
  @@index([nutritionPlanDayId])
}

model NutritionPlanMealIngredient {
  id                  String            @id @default(uuid())
  nutritionPlanMealId String
  mealIngredientId    String
  grams               Float
  createdAt           DateTime          @default(now())
  mealIngredient      MealIngredient    @relation(fields: [mealIngredientId], references: [id], onDelete: Cascade)
  nutritionPlanMeal   NutritionPlanMeal @relation(fields: [nutritionPlanMealId], references: [id], onDelete: Cascade)

  @@unique([nutritionPlanMealId, mealIngredientId])
  @@index([nutritionPlanMealId])
  @@index([mealIngredientId])
}

model ClientSurvey {
  id        String   @id @default(uuid())
  userId    String   @unique
  data      Json
  version   Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([updatedAt])
}

enum ServiceType {
  WORKOUT_PLAN
  MEAL_PLAN
  COACHING_COMPLETE
  IN_PERSON_MEETING
  PREMIUM_ACCESS
}

enum SubscriptionDuration {
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}

enum Currency {
  NOK
  EUR
  USD
}

enum DeliveryStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MeetingType {
  INITIAL_CONSULTATION
  IN_PERSON_TRAINING
  CHECK_IN
  PLAN_REVIEW
}

enum MeetingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum LocationType {
  VIRTUAL
  COACH_LOCATION
  TRAINEE_LOCATION
  OTHER
}
