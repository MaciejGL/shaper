type BaseExercise {
  id: ID!
  name: String!
  description: String
  additionalInstructions: String
  type: ExerciseType
  videoUrl: String
  equipment: Equipment
  muscleGroups: [MuscleGroup!]!
  secondaryMuscleGroups: [MuscleGroup!]!
  muscleGroupCategories: [MuscleGroupCategory!]!
  isPublic: Boolean!
  createdBy: UserPublic
  createdAt: String!
  updatedAt: String!
  substitutes: [BaseExerciseSubstitute!]!
  canBeSubstitutedBy: [BaseExerciseSubstitute!]!
  images: [Image!]!

  # V2 Exercise Integration Fields
  version: Int!
  dataSource: String
  sourceId: String
  importedAt: String
  difficulty: String
  instructions: String
  tips: String

  # Premium Feature
  isPremium: Boolean!
}

type BaseExerciseSubstitute {
  id: ID!
  originalId: ID!
  substituteId: ID!
  reason: String
  createdAt: String!
  original: BaseExercise!
  substitute: BaseExercise!
}

enum Equipment {
  BARBELL
  EZ_BAR
  DUMBBELL
  MACHINE
  CABLE
  BODYWEIGHT
  BAND
  KETTLEBELL
  SMITH_MACHINE
  MEDICINE_BALL
  EXERCISE_BALL
  PULL_UP_BAR
  BENCH
  INCLINE_BENCH
  MAT
  FOAM_ROLLER
  OTHER
}

enum ExerciseType {
  SUPERSET_1A
  SUPERSET_1B
  DROPSET
  CARDIO
}

input ExerciseWhereInput {
  equipment: Equipment
  muscleGroups: [ID!]
}

type GetExercisesResponse {
  publicExercises: [BaseExercise!]!
  trainerExercises: [BaseExercise!]!
}

type Query {
  userExercises(where: ExerciseWhereInput): [BaseExercise!]!
  publicExercises(where: ExerciseWhereInput): [BaseExercise!]!
  exercise(id: ID!): BaseExercise
  exercisesProgressByUser(userId: ID): [ExerciseProgress!]!
  getExercises: GetExercisesResponse!
}

type Mutation {
  createExercise(input: CreateExerciseInput!): Boolean!
  updateExercise(id: ID!, input: UpdateExerciseInput!): Boolean!
  deleteExercise(id: ID!): Boolean!
  addSubstituteExercise(input: AddSubstituteExerciseInput!): Boolean!
  removeSubstituteExercise(input: RemoveSubstituteExerciseInput!): Boolean!
  updateSubstituteExercise(input: UpdateSubstituteExerciseInput!): Boolean!
}

input CreateExerciseInput {
  name: String!
  description: String
  videoUrl: String
  equipment: Equipment
  muscleGroups: [ID!]!
  secondaryMuscleGroups: [ID!]!
  substituteIds: [ID!]
  imageUrls: [String!]
}

input UpdateExerciseInput {
  name: String
  description: String
  videoUrl: String
  equipment: Equipment
  muscleGroups: [ID!]!
  secondaryMuscleGroups: [ID!]!
  substituteIds: [ID!]
  imageUrls: [String!]
}

input AddSubstituteExerciseInput {
  originalId: ID!
  substituteId: ID!
  reason: String
}

input RemoveSubstituteExerciseInput {
  originalId: ID!
  substituteId: ID!
}

input UpdateSubstituteExerciseInput {
  originalId: ID!
  substituteId: ID!
  reason: String
}

type ExerciseProgress {
  baseExercise: BaseExercise
  estimated1RMProgress: [OneRmEntry!]! # (date, 1RM)
  totalVolumeProgress: [VolumeEntry!]! # (date/week, volume)
  averageRpe: Float
  totalSets: Int
  lastPerformed: String
}

type OneRmEntry {
  date: String!
  average1RM: Float!
  detailedLogs: [OneRmLog!]!
}

type OneRmLog {
  estimated1RM: Float!
  weight: Float
  reps: Int
}

type VolumeEntry {
  week: String!
  totalVolume: Float!
  totalSets: Int!
}
