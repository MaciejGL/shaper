type BaseExercise {
  id: ID!
  name: String!
  description: String
  additionalInstructions: String
  type: ExerciseType
  videoUrl: String
  equipment: Equipment
  muscleGroups: [MuscleGroup!]!
  muscleGroupCategories: [MuscleGroupCategory!]!
  isPublic: Boolean!
  createdBy: UserPublic
  createdAt: String!
  updatedAt: String!
}

enum Equipment {
  BARBELL
  DUMBBELL
  MACHINE
  CABLE
  BODYWEIGHT
  BAND
  MEDICINE_BALL
  WHEEL
  TRAP_BAR
  KETTLEBELL
  SMITH_MACHINE
  OTHER
}

enum ExerciseType {
  SUPERSET_1A
  SUPERSET_1B
  DROPSET
  CARDIO
}

input ExerciseWhereInput {
  equipment: Equipment
  muscleGroups: [ID!]
}

type Query {
  userExercises(where: ExerciseWhereInput): [BaseExercise!]!
  publicExercises(where: ExerciseWhereInput): [BaseExercise!]!
  exercise(id: ID!): BaseExercise
  exercisesProgressByUser(userId: ID): [ExerciseProgress!]!
}

type Mutation {
  createExercise(input: CreateExerciseInput!): Boolean!
  updateExercise(id: ID!, input: UpdateExerciseInput!): Boolean!
  deleteExercise(id: ID!): Boolean!
}

input CreateExerciseInput {
  name: String!
  description: String
  videoUrl: String
  equipment: Equipment
  muscleGroups: [ID!]!
}

input UpdateExerciseInput {
  name: String
  description: String
  videoUrl: String
  equipment: Equipment
  muscleGroups: [ID!]!
}

type ExerciseProgress {
  baseExercise: BaseExercise
  estimated1RMProgress: [OneRmEntry!]! # (date, 1RM)
  totalVolumeProgress: [VolumeEntry!]! # (date/week, volume)
  averageRpe: Float
  totalSets: Int
  lastPerformed: String
}

type OneRmEntry {
  date: String!
  average1RM: Float!
  detailedLogs: [OneRmLog!]!
}

type OneRmLog {
  estimated1RM: Float!
  weight: Float
  reps: Int
}

type VolumeEntry {
  week: String!
  totalVolume: Float!
  totalSets: Int!
}
