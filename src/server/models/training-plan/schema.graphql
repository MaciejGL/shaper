type TrainingPlan {
  id: ID!
  title: String!
  description: String
  completedAt: String

  isPublic: Boolean!
  isTemplate: Boolean!
  isDraft: Boolean!
  active: Boolean!
  startDate: String
  endDate: String
  progress: Float
  nextSession: String
  isDemo: Boolean!

  rating: Float
  reviews: [Review!]!
  userReview: Review
  totalReviews: Int!
  lastSessionActivity: String

  createdBy: UserPublic
  assignedTo: UserPublic
  weeks: [TrainingWeek!]!

  weekCount: Int!
  assignedCount: Int!
  collaboratorCount: Int!
  collaborators: [TrainingPlanCollaborator!]!
  currentWeekNumber: Int
  completedWorkoutsDays: Int!
  adherence: Float!
  totalWorkouts: Int!
  difficulty: Difficulty

  createdAt: String!
  updatedAt: String!
}
enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

type MyPlansPayload {
  activePlan: TrainingPlan
  availablePlans: [TrainingPlan!]!
  completedPlans: [TrainingPlan!]!
  quickWorkoutPlan: TrainingPlan
}

type CurrentWorkoutWeekPayload {
  plan: TrainingPlan
  currentWeekIndex: Int!
  totalWeeks: Int!
}

type Query {
  getTemplates(draft: Boolean, limit: Int): [TrainingPlan!]!
  getCollaborationTemplates(draft: Boolean): [TrainingPlan!]!
  getTrainingPlanById(id: ID!): TrainingPlan!
  getClientTrainingPlans(clientId: ID!): [TrainingPlan!]!
  getClientActivePlan(clientId: ID!): TrainingPlan
  getMyPlansOverview: MyPlansPayload!
  getMyPlansOverviewLite: MyPlansPayload!
  getMyPlansOverviewFull: MyPlansPayload!
  getActivePlanId: ID
  getCurrentWorkoutWeek: CurrentWorkoutWeekPayload
  getQuickWorkoutPlan: TrainingPlan!
}

type CreateTrainingPlanPayload {
  id: ID!
  success: Boolean!
}

type Mutation {
  createTrainingPlan(
    input: CreateTrainingPlanInput!
  ): CreateTrainingPlanPayload!
  createDraftTemplate: TrainingPlan!
  updateTrainingPlan(input: UpdateTrainingPlanInput!): Boolean!
  deleteTrainingPlan(id: ID!): Boolean!
  duplicateTrainingPlan(id: ID!): ID!
  assignTrainingPlanToClient(input: AssignTrainingPlanToClientInput!): Boolean!
  removeTrainingPlanFromClient(planId: ID!, clientId: ID!): Boolean!
  activatePlan(planId: ID!, startDate: String!, resume: Boolean!): Boolean!
  pausePlan(planId: ID!): Boolean!
  closePlan(planId: ID!): Boolean!
  deletePlan(planId: ID!): Boolean!
  extendPlan(planId: ID!, weeks: [ID!]!): Boolean!
  removeWeek(planId: ID!, weekId: ID!): Boolean!

  # Granular update mutations - more efficient than full plan updates
  updateTrainingPlanDetails(input: UpdateTrainingPlanDetailsInput!): Boolean!
  updateTrainingWeekDetails(input: UpdateTrainingWeekDetailsInput!): Boolean!
  updateTrainingDayData(input: UpdateTrainingDayDataInput!): Boolean!
  updateTrainingExercise(input: UpdateTrainingExerciseInput!): Boolean!
  updateExerciseSet(input: UpdateExerciseSetInput!): Boolean!

  # Add/remove operations
  duplicateTrainingWeek(input: DuplicateTrainingWeekInput!): ID!
  removeTrainingWeek(weekId: ID!): Boolean!
  addTrainingWeek(input: AddTrainingWeekInput!): ID!
  addExerciseToDay(input: AddExerciseToDayInput!): ID!
  removeExerciseFromDay(exerciseId: ID!): Boolean!
  removeAllExercisesFromDay(input: RemoveAllExercisesFromDayInput!): Boolean!
  moveExercise(input: MoveExerciseInput!): Boolean!
  addSetToExercise(input: AddSetToExerciseInput!): ID!
  removeSetFromExercise(setId: ID!): Boolean!
}

input AssignTrainingPlanToClientInput {
  planId: ID!
  clientId: ID!
  startDate: String
}

input CreateExerciseSetInput {
  order: Int!
  reps: Int
  minReps: Int
  maxReps: Int
  rpe: Int
  weight: Float
}

input CreateTrainingExerciseInput {
  name: String!
  restSeconds: Int
  tempo: String
  instructions: String
  additionalInstructions: String
  type: ExerciseType
  order: Int!
  warmupSets: Int
  sets: [CreateExerciseSetInput!]
  baseId: ID
  videoUrl: String
}

input CreateTrainingDayInput {
  dayOfWeek: Int!
  isRestDay: Boolean!
  workoutType: String
  exercises: [CreateTrainingExerciseInput!]
}

input CreateTrainingWeekInput {
  weekNumber: Int!
  name: String!
  description: String
  days: [CreateTrainingDayInput!]
}

input CreateTrainingPlanInput {
  title: String!
  description: String
  isPublic: Boolean
  isDraft: Boolean
  difficulty: Difficulty
  weeks: [CreateTrainingWeekInput!]
}

input UpdateTrainingPlanInput {
  id: ID!
  title: String
  description: String
  isPublic: Boolean
  isDraft: Boolean
  difficulty: Difficulty
  weeks: [UpdateTrainingWeekInput!]
}

input UpdateTrainingWeekInput {
  id: ID!
  weekNumber: Int!
  name: String
  description: String
  days: [UpdateTrainingDayInput!]
}

input UpdateTrainingDayInput {
  id: ID!
  dayOfWeek: Int!
  isRestDay: Boolean
  workoutType: String
  exercises: [UpdateTrainingExerciseInput!]
}

input UpdateTrainingExerciseInput {
  id: ID!
  name: String
  order: Int!
  restSeconds: Int
  tempo: String
  instructions: String
  additionalInstructions: String
  type: ExerciseType
  warmupSets: Int
  baseId: ID
  videoUrl: String
  sets: [UpdateExerciseSetInput!]
}

input UpdateExerciseSetInput {
  id: ID!
  order: Int!
  reps: Int
  minReps: Int
  maxReps: Int
  rpe: Int
  weight: Float
}

# New granular update input types
input UpdateTrainingPlanDetailsInput {
  id: ID!
  title: String
  description: String
  isPublic: Boolean
  isDraft: Boolean
  difficulty: Difficulty
}

input UpdateTrainingWeekDetailsInput {
  id: ID!
  name: String
  description: String
  weekNumber: Int
}

input UpdateTrainingDayDataInput {
  dayId: ID!
  isRestDay: Boolean
  workoutType: WorkoutType
}

# Add/remove operation input types
input AddExerciseToDayInput {
  dayId: ID!
  name: String!
  order: Int!
  restSeconds: Int
  tempo: String
  instructions: String
  additionalInstructions: String
  type: ExerciseType
  warmupSets: Int
  baseId: ID
}

input RemoveAllExercisesFromDayInput {
  dayId: ID!
}

input AddSetToExerciseInput {
  exerciseId: ID!
  order: Int!
  reps: Int
  minReps: Int
  maxReps: Int
  weight: Float
  rpe: Int
}

input MoveExerciseInput {
  dayId: ID!
  exerciseId: ID!
  newOrder: Int!
  targetDayId: ID # Optional: when provided, moves exercise to a different day
}

input DuplicateTrainingWeekInput {
  weekId: ID!
  trainingPlanId: ID!
}

input AddTrainingWeekInput {
  trainingPlanId: ID!
  weekNumber: Int!
}
