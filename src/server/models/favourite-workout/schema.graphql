type FavouriteWorkout {
  id: ID!
  title: String!
  description: String
  createdById: ID!
  createdAt: String!
  updatedAt: String!
  exercises: [FavouriteWorkoutExercise!]!
}

type FavouriteWorkoutExercise {
  id: ID!
  name: String!
  order: Int!
  baseId: ID
  favouriteWorkoutId: ID!
  restSeconds: Int
  description: String
  additionalInstructions: String
  instructions: [String!]
  tips: [String!]
  difficulty: String
  base: BaseExercise
  sets: [FavouriteWorkoutSet!]!
}

type FavouriteWorkoutSet {
  id: ID!
  order: Int!
  reps: Int
  minReps: Int
  maxReps: Int
  weight: Float
  rpe: Int
  exerciseId: ID!
}

# Input types for creating favourite workouts
input CreateFavouriteWorkoutInput {
  title: String!
  description: String
  exercises: [CreateFavouriteWorkoutExerciseInput!]!
}

input CreateFavouriteWorkoutExerciseInput {
  name: String!
  order: Int!
  baseId: ID
  restSeconds: Int
  description: String
  additionalInstructions: String
  instructions: [String!]
  tips: [String!]
  difficulty: String
  sets: [CreateFavouriteWorkoutSetInput!]!
}

input CreateFavouriteWorkoutSetInput {
  order: Int!
  reps: Int
  minReps: Int
  maxReps: Int
  weight: Float
  rpe: Int
}

# Input types for updating favourite workouts
input UpdateFavouriteWorkoutInput {
  id: ID!
  title: String
  description: String
  additionalInstructions: String
  instructions: [String!]
  tips: [String!]
  difficulty: String
  exercises: [UpdateFavouriteWorkoutExerciseInput!]
}

input UpdateFavouriteWorkoutExerciseInput {
  id: ID # If provided, update existing exercise; if not, create new
  name: String!
  order: Int!
  baseId: ID
  restSeconds: Int
  description: String
  tips: [String!]
  difficulty: String
  additionalInstructions: String
  instructions: [String!]
  sets: [UpdateFavouriteWorkoutSetInput!]!
}

input UpdateFavouriteWorkoutSetInput {
  id: ID # If provided, update existing set; if not, create new
  order: Int!
  reps: Int
  minReps: Int
  maxReps: Int
  weight: Float
  rpe: Int
}

# Input for starting a workout from favourite
input StartWorkoutFromFavouriteInput {
  favouriteWorkoutId: ID!
  replaceExisting: Boolean = true
  dayId: ID # Optional: if provided, add to this specific day; otherwise add to today
}

extend type Query {
  # Get all favourite workouts for the current user
  getFavouriteWorkouts: [FavouriteWorkout!]!

  # Get a specific favourite workout by ID
  getFavouriteWorkout(id: ID!): FavouriteWorkout
}

extend type Mutation {
  # Create a new favourite workout
  createFavouriteWorkout(input: CreateFavouriteWorkoutInput!): FavouriteWorkout!

  # Update an existing favourite workout
  updateFavouriteWorkout(input: UpdateFavouriteWorkoutInput!): FavouriteWorkout!

  # Delete a favourite workout
  deleteFavouriteWorkout(id: ID!): Boolean!

  # Start a workout from a favourite (copy to quick workout plan)
  startWorkoutFromFavourite(input: StartWorkoutFromFavouriteInput!): ID!
}
