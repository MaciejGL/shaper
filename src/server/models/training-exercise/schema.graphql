type Substitute {
  id: ID!
  name: String!
  description: String
  instructions: [String!]
  tips: [String!]
  difficulty: String
  additionalInstructions: String
  type: ExerciseType
  completedAt: String
  muscleGroups: [MuscleGroup!]!
  sets: [ExerciseSet!]!
  isPublic: Boolean!
  videoUrl: String

  dayId: ID!
  baseId: ID

  createdAt: String!
  updatedAt: String!
}

type TrainingExercise {
  id: ID!
  name: String!
  restSeconds: Int
  tempo: String
  warmupSets: Int
  description: String
  instructions: [String!]
  tips: [String!]
  difficulty: String
  additionalInstructions: String
  type: ExerciseType
  order: Int!
  completedAt: String
  muscleGroups: [MuscleGroup!]!
  isExtra: Boolean!
  sets: [ExerciseSet!]!
  logs: [ExerciseLog!]!
  isPublic: Boolean!
  substitutes: [BaseExerciseSubstitute!]!
  substitutedBy: Substitute
  videoUrl: String
  images: [Image!]!

  dayId: ID!
  baseId: ID
  equipment: Equipment
  createdAt: String!
  updatedAt: String!
}

type SuggestedSets {
  reps: Int
  minReps: Int
  maxReps: Int
  rpe: Int
}

type AiMeta {
  explanation: String!
}

type AiExerciseSuggestion {
  exercise: BaseExercise!
  sets: [SuggestedSets]!
  aiMeta: AiMeta!
}

type Query {
  getTrainingExercise(id: ID!): TrainingExercise
}

type Mutation {
  addExercisesToWorkout(
    input: AddExercisesToWorkoutInput!
  ): [TrainingExercise!]!
  addAiExerciseToWorkout(input: AddAiExerciseToWorkoutInput!): TrainingExercise!
  addSingleExerciseToDay(dayId: ID!, exerciseBaseId: ID!): TrainingExercise!
  removeExerciseFromWorkout(exerciseId: ID!): Boolean!
  clearWorkoutDay(dayId: ID!): Boolean!
  addSet(exerciseId: ID!): ExerciseSet!
  removeSet(setId: ID!): Boolean!
  getAiExerciseSuggestions(dayId: ID!): [AiExerciseSuggestion!]!
  generateAiWorkout(input: GenerateAiWorkoutInput!): AiWorkoutResult!
  updateExerciseForm(input: UpdateExerciseFormInput!): TrainingExercise!
  addSetExerciseForm(input: AddSetExerciseFormInput!): ExerciseSet!
  removeSetExerciseForm(setId: ID!): Boolean!
  swapExercise(exerciseId: ID!, substituteId: ID!): Substitute!

  # Unified workout creation - works for both manual and AI flows
  createQuickWorkout(input: CreateQuickWorkoutInput!): TrainingPlan!

  # Legacy mutation - kept for backwards compatibility
  addExercisesToQuickWorkout(
    exercises: [QuickWorkoutExerciseInput!]!
  ): TrainingPlan!
}

input CreateQuickWorkoutInput {
  exercises: [QuickWorkoutExerciseInput!]!
  replaceExisting: Boolean! # Whether to replace current exercises or add to them
  dayId: ID # Optional - if provided, adds to specific day; otherwise uses today
}

input QuickWorkoutExerciseInput {
  exerciseId: ID!
  order: Int!
  sets: [QuickWorkoutSetInput!] # Optional - if not provided, creates default sets
}

input QuickWorkoutSetInput {
  order: Int!
  reps: Int
  minReps: Int
  maxReps: Int
  rpe: Int
  weight: Float
}

input AddSetExerciseFormInput {
  exerciseId: ID!
  set: AddSetExerciseFormSetInput!
}

input AddSetExerciseFormSetInput {
  minReps: Int
  maxReps: Int
  weight: Float
  rpe: Int
}

input AddExercisesToWorkoutInput {
  workoutId: ID!
  exerciseIds: [ID!]!
}

input SuggestedSetsInput {
  reps: Int!
  rpe: Int
}

input AddAiExerciseToWorkoutInput {
  dayId: ID!
  exerciseId: ID!
  sets: [SuggestedSetsInput]!
}

input UpdateExerciseFormInput {
  exerciseId: ID!
  name: String
  description: String
  additionalInstructions: String
  instructions: [String!]
  tips: [String!]
  difficulty: String
  type: ExerciseType
  restSeconds: Int
  warmupSets: Int
  tempo: String
  sets: [UpdateExerciseSetFormInput!]
}

input UpdateExerciseSetFormInput {
  id: ID
  order: Int!
  minReps: Int
  maxReps: Int
  weight: Float
  rpe: Int
}

enum RpeRange {
  RPE_6_7
  RPE_7_8
  RPE_8_10
}

enum RepFocus {
  STRENGTH
  HYPERTROPHY
  ENDURANCE
}

input GenerateAiWorkoutInput {
  selectedMuscleGroups: [String!]!
  selectedEquipment: [Equipment!]!
  exerciseCount: Int!
  maxSetsPerExercise: Int!
  rpeRange: RpeRange!
  repFocus: RepFocus!
}

type AiWorkoutExercise {
  exercise: BaseExercise!
  sets: [SuggestedSets]!
  order: Int!
}

type AiWorkoutVariant {
  name: String!
  exercises: [AiWorkoutExercise!]!
  totalDuration: Int
  summary: String!
  reasoning: String!
}

type AiWorkoutResult {
  variants: [AiWorkoutVariant!]!
}
