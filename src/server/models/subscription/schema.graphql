# SIMPLIFIED Subscription System GraphQL Schema
# This replaces the complex schema with Stripe-as-source-of-truth approach

enum ServiceType {
  workout_plan
  meal_plan
  coaching_complete
  in_person_meeting
  premium_access
}

enum SubscriptionDuration {
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}

enum DeliveryStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

# Simplified user subscription status - focuses on what user can access
type UserSubscriptionStatus {
  hasPremium: Boolean!
  trainerId: ID
  canAccessPremiumTrainingPlans: Boolean!
  canAccessPremiumExercises: Boolean!
  canAccessMealPlans: Boolean!
  subscriptionEndDate: String # When current subscription ends
  isInGracePeriod: Boolean! # Stripe handles grace periods
}

# UserSubscription type is defined in user-subscription/schema.graphql

# Package templates - simplified without services relation
type PackageTemplate {
  id: ID!
  name: String!
  description: String
  duration: SubscriptionDuration!
  isActive: Boolean!

  # Stripe integration
  stripeProductId: String
  stripePriceId: String

  # Trainer assignment
  trainerId: ID
  trainer: User

  # Service info stored in metadata instead of separate table
  serviceType: ServiceType # Computed from metadata
  createdAt: String!
  updatedAt: String!
}

# Service delivery tracking (replaces complex usage tracking)
type ServiceDelivery {
  id: ID!
  trainerId: ID!
  clientId: ID!
  serviceType: ServiceType
  packageName: String!
  quantity: Int!
  status: DeliveryStatus!

  deliveredAt: String
  deliveryNotes: String

  # Relations
  trainer: User!
  client: User!

  createdAt: String!
  updatedAt: String!
}

# SIMPLIFIED QUERIES - Focus on essentials only
type Query {
  # Essential subscription checks
  getMySubscriptionStatus: UserSubscriptionStatus!
  checkPremiumAccess: Boolean!

  # Package management
  getActivePackageTemplates(trainerId: ID): [PackageTemplate!]!
  getPackageTemplate(id: ID!): PackageTemplate

  # Service delivery (replaces complex usage tracking)
  getMyServiceDeliveries(status: DeliveryStatus): [ServiceDelivery!]!
  getTrainerDeliveries(
    trainerId: ID!
    status: DeliveryStatus
  ): [ServiceDelivery!]!

  # Basic subscription info (simplified)
  getMySubscriptions: [UserSubscription!]!
}

type Mutation {
  # Service delivery management (replaces usage tracking)
  updateServiceDelivery(
    deliveryId: ID!
    status: DeliveryStatus!
    notes: String
  ): ServiceDelivery!
}
