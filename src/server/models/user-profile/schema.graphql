enum FitnessLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ActivityLevel {
  SEDENTARY
  LIGHT
  MODERATE
  ACTIVE
  ATHLETE
}

enum Goal {
  LOSE_WEIGHT
  MAINTAIN
  GAIN_MUSCLE
  IMPROVE_HEALTH
  BODY_RECOMPOSITION
  INCREASE_STRENGTH
  INCREASE_ENDURANCE
}

enum WeightUnit {
  kg
  lbs
}

enum HeightUnit {
  cm
  ft
}

enum Theme {
  light
  dark
  system
}

enum TimeFormat {
  h12
  h24
}

enum TrainingView {
  SIMPLE
  ADVANCED
}

type NotificationPreferences {
  workoutReminders: Boolean!
  progressUpdates: Boolean!
  systemNotifications: Boolean!
  emailNotifications: Boolean!
  pushNotifications: Boolean!
  checkinReminders: Boolean!
}

type UserProfile {
  id: ID!
  firstName: String
  lastName: String
  phone: String
  birthday: String
  sex: String
  avatarUrl: String
  height: Float
  weight: Float
  fitnessLevel: FitnessLevel
  allergies: String
  email: String
  activityLevel: ActivityLevel
  goals: [Goal!]!
  bio: String
  locations: [Location!]!

  # Trainer-specific fields
  specialization: [String!]!
  credentials: [String!]!
  successStories: [String!]!
  trainerSince: String

  # User Preferences
  weekStartsOn: Int
  weightUnit: WeightUnit!
  heightUnit: HeightUnit!
  theme: Theme!
  timeFormat: TimeFormat!
  trainingView: TrainingView!
  hasCompletedOnboarding: Boolean!
  notificationPreferences: NotificationPreferences!

  # Check-in preferences
  timezone: String
  checkinReminders: Boolean

  createdAt: String!
  updatedAt: String!

  bodyMeasures: [UserBodyMeasure!]!
}

type UserSession {
  id: ID!
  user: User!
  otp: String!
  expiresAt: String!
  createdAt: String!
}

type UserBodyMeasure {
  id: ID!
  measuredAt: String!
  weight: Float
  chest: Float
  waist: Float
  hips: Float
  neck: Float
  bicepsLeft: Float
  bicepsRight: Float
  thighLeft: Float
  thighRight: Float
  calfLeft: Float
  calfRight: Float
  bodyFat: Float
  notes: String
}

type Query {
  profile: UserProfile
  bodyMeasures: [UserBodyMeasure!]!
  clientBodyMeasures(clientId: ID!): [UserBodyMeasure!]!
}

input NotificationPreferencesInput {
  workoutReminders: Boolean
  progressUpdates: Boolean

  systemNotifications: Boolean
  emailNotifications: Boolean
  pushNotifications: Boolean
  checkinReminders: Boolean
}

input UpdateProfileInput {
  firstName: String
  lastName: String
  phone: String
  email: String
  birthday: String
  sex: String
  avatarUrl: String
  height: Float
  weight: Float
  fitnessLevel: FitnessLevel
  allergies: String
  activityLevel: ActivityLevel
  goals: [Goal!]
  bio: String
  # Location fields (for adding new locations)
  locationCity: String
  locationCountry: String
  locationCountryCode: String
  # Trainer-specific fields
  specialization: [String!]
  credentials: [String!]
  successStories: [String!]
  trainerSince: String
  weekStartsOn: Int
  weightUnit: WeightUnit
  heightUnit: HeightUnit
  theme: Theme
  timeFormat: TimeFormat
  trainingView: TrainingView
  hasCompletedOnboarding: Boolean
  notificationPreferences: NotificationPreferencesInput

  # Check-in preferences
  timezone: String
  checkinReminders: Boolean
  checkinReminderTime: Int
}

input AddBodyMeasurementInput {
  measuredAt: String
  weight: Float
  chest: Float
  waist: Float
  hips: Float
  neck: Float
  bicepsLeft: Float
  bicepsRight: Float
  thighLeft: Float
  thighRight: Float
  calfLeft: Float
  calfRight: Float
  bodyFat: Float
  notes: String
}

input UpdateBodyMeasurementInput {
  id: ID!
  measuredAt: String
  weight: Float
  chest: Float
  waist: Float
  hips: Float
  neck: Float
  bicepsLeft: Float
  bicepsRight: Float
  thighLeft: Float
  thighRight: Float
  calfLeft: Float
  calfRight: Float
  bodyFat: Float
  notes: String
}

input AddUserLocationInput {
  city: String!
  country: String!
  countryCode: String!
}

type Mutation {
  updateProfile(input: UpdateProfileInput!): UserProfile
  addBodyMeasurement(input: AddBodyMeasurementInput!): UserBodyMeasure!
  updateBodyMeasurement(input: UpdateBodyMeasurementInput!): UserBodyMeasure!
  deleteBodyMeasurement(id: ID!): Boolean!
  addUserLocation(input: AddUserLocationInput!): UserProfile!
  removeUserLocation(locationId: ID!): UserProfile!
}
