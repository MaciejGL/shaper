type TrainingDay {
  id: ID!
  dayOfWeek: Int!
  workoutType: WorkoutType
  isRestDay: Boolean!

  duration: Int
  startedAt: String
  completedAt: String
  scheduledAt: String
  exercises: [TrainingExercise!]!

  trainingWeekId: ID!
  createdAt: String!
  updatedAt: String!
}

enum WorkoutType {
  Push
  Pull
  Legs
  UpperBody
  LowerBody
  FullBody

  HIIT
  LISS
  Cardio

  Mobility
  Stretching

  # Split
  Back
  Arms
  Biceps
  Triceps
  Quads
  Hams
  Calves
  Glutes
  Chest

  Abs
  Core

  Custom
}

enum WorkoutSessionEvent {
  COMPLETE
  PROGRESS
}

type Query {
  getWorkoutInfo(dayId: ID!): TrainingDay!
}

input UpdateTrainingDayDataInput {
  dayId: ID!
  isRestDay: Boolean
  workoutType: WorkoutType
}

input MoveExercisesToDayInput {
  sourceDayId: ID!
  targetDayId: ID!
}

type Mutation {
  logWorkoutSessionEvent(dayId: ID!, event: WorkoutSessionEvent!): ID!
  logWorkoutProgress(dayId: ID!, tick: Int!): ID!
  updateTrainingDayData(input: UpdateTrainingDayDataInput!): Boolean!
  moveExercisesToDay(input: MoveExercisesToDayInput!): Boolean!
}
