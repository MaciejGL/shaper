---
description: Hypertro/Shaper app context - fitness training platform with web app embedded in native shell
globs:
alwaysApply: true
---

# Hypertro/Shaper - Fitness Training Platform

## App Architecture

- **Web App**: Next.js 14+ app built with React, TypeScript, Tailwind CSS
- **Native Shell**: Expo companion app (`expo-app/`) that embeds the web app via WebView
- **Hybrid Approach**: Web-first with native mobile bridge for enhanced mobile features
- **PWA Support**: Progressive Web App with service worker and manifest

## Domain Context

- **Primary Focus**: Personal fitness training and workout management
- **Key Entities**:
  - Users (trainers and trainees)
  - Training plans and workout sessions
  - Exercises (base exercises, custom variations, sets, reps)
  - Meal plans and meal recipes.
  - Body measurements and progress tracking
  - Trainer-client relationships and collaboration

## Core Features

- **Workout Planning**: Create, customize, and schedule training plans
- **Exercise Library**: Comprehensive database with instructions, muscle groups, equipment
- **Session Tracking**: Real-time workout logging with sets, reps, weight, RPE
- **Progress Analytics**: Charts, measurements, performance insights
- **Nutrition**: Meal planning, food logging, macro tracking
- **Social/Collaboration**: Trainer-client communication, shared plans
- **Subscription System**: Premium features with Stripe integration

## Technical Stack

- **Frontend**: Next.js 14, React 19, TypeScript, Tailwind CSS
- **Backend**: GraphQL API with Prisma ORM, PostgreSQL
- **State Management**: React Query (TanStack Query) for server state
- **UI Components**: Radix UI primitives with custom design system
- **Mobile Bridge**: Custom WebView bridge for native features
- **Authentication**: Custom auth system with session management
- **Payments**: Stripe integration for subscriptions

## User Types & Permissions

- **Regular Users**: Create personal workouts, track progress
- **Trainers**: Create plans for clients, manage multiple users
- **Premium Users**: Access to advanced features, AI suggestions
- **Admins**: Platform management and moderation

## Key Business Logic

- **Training Plans**: Template-based with weekly schedules and progression
- **Exercise Variations**: Base exercises with custom modifications and substitutions
- **Set Types**: Working sets, warm-up sets, drop sets, supersets
- **Progress Tracking**: Weight progression, volume tracking, RPE (Rate of Perceived Exertion)
- **Meal Planning**: Macro-based nutrition with USDA food database integration
- **Collaboration**: Trainer-client workflows with permissions and sharing

## Mobile-Specific Features

- **Push Notifications**: Workout reminders, trainer messages
- **Offline Support**: Core workout tracking works offline
- **Native Camera**: Photo uploads for progress tracking
- **Biometric Auth**: Fingerprint/Face ID for quick access

## Data Patterns

- **Optimistic Updates**: Immediate UI feedback for better UX
- **Debounced Mutations**: Prevent API spam during rapid user input
- **Batch Operations**: Efficient data loading for complex views
- **Real-time Sync**: Changes sync across devices and trainer-client pairs

When implementing features, consider:

- **Fitness Domain**: Use proper terminology (sets, reps, RPE, macros, etc.)
- **User Experience**: Prioritize quick workout logging and minimal friction
- **Mobile-First**: Design works well on phones during workouts
- **Trainer Workflows**: Consider both personal use and trainer-client scenarios
- **Performance**: Workout sessions need fast, reliable data entry
