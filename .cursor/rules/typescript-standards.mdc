---
description: TypeScript standards and strict typing practices. No any, no type overrides, precise types.
globs:
  - src/**/*.{ts,tsx}
  - expo-app/**/*.{ts,tsx}
alwaysApply: false
---

# TypeScript Standards

## Strict Typing Rules

### ❌ NEVER Use

- **`any` type**: Always use specific types or `unknown` if truly unknown
- **Type assertions (`as`)**: Avoid unless absolutely necessary for external libraries
- **Type overrides**: Don't override existing types; extend or compose instead
- **`@ts-ignore` or `@ts-expect-error`**: Fix the underlying type issue instead

### ✅ ALWAYS Use

- **Generated types**: Leverage `GQL*` types from `src/generated/graphql-client.ts`
- **Precise interfaces**: Define exact shape with required/optional fields
- **Enums**: For reusable discriminants and constants
- **Union types**: For controlled variations (`'loading' | 'success' | 'error'`)
- **Generic constraints**: `<T extends SomeType>` for type safety

## Type Definition Patterns

### Component Props

```typescript
// ✅ Good - Precise interface
interface ButtonProps {
  variant: 'primary' | 'secondary' | 'destructive'
  size?: 'sm' | 'md' | 'lg'
  disabled?: boolean
  onClick: () => void
  children: React.ReactNode
}

// ❌ Bad - Using any
interface ButtonProps {
  variant: any
  onClick: any
}
```

### Hook Return Types

```typescript
// ✅ Good - Explicit return type
interface UseExerciseReturn {
  exercise: GQLExercise | null
  isLoading: boolean
  error: string | null
  updateExercise: (data: GQLUpdateExerciseInput) => Promise<void>
}

export function useExercise(id: string): UseExerciseReturn {
  // implementation
}
```

### API Response Types

```typescript
// ✅ Good - Use generated GraphQL types
function processWorkout(workout: GQLWorkout): ProcessedWorkout {
  // implementation
}

// ❌ Bad - Generic any
function processWorkout(workout: any): any {
  // implementation
}
```

## Type Sources Priority

1. **Generated types**: Use `GQL*` types from codegen first
2. **Local types**: Create specific interfaces for component/hook needs
3. **Utility types**: Use TypeScript utilities (`Pick`, `Omit`, `Partial`)
4. **Library types**: Import from `@types/*` packages
5. **Custom types**: Create in `src/types/` for reusable domain types

## Enum Usage

### ✅ Prefer Enums for Reusable Constants

```typescript
// ✅ Good - Reusable across components
export enum WorkoutStatus {
  DRAFT = 'DRAFT',
  ACTIVE = 'ACTIVE',
  COMPLETED = 'COMPLETED',
  ARCHIVED = 'ARCHIVED',
}

// ✅ Good - Union type for single use
type ButtonSize = 'sm' | 'md' | 'lg'
```

## Type Composition

### ✅ Extend and Compose Types

```typescript
// ✅ Good - Extending existing types
interface ExtendedUser extends GQLUser {
  displayName: string
  isOnline: boolean
}

// ✅ Good - Composing with utility types
type CreateUserInput = Omit<GQLUser, 'id' | 'createdAt' | 'updatedAt'>
```

## Error Handling Types

```typescript
// ✅ Good - Typed error handling
interface ApiError {
  message: string
  code: string
  field?: string
}

// ✅ Good - Result pattern
type Result<T> =
  | { success: true; data: T }
  | { success: false; error: ApiError }
```

## Form Types

```typescript
// ✅ Good - Form-specific types derived from GraphQL
type ExerciseFormData = Pick<
  GQLExercise,
  'name' | 'instructions' | 'muscleGroups'
> & {
  sets: Array<Pick<GQLSet, 'reps' | 'weight' | 'rpe'>>
}
```

## Type Guards

```typescript
// ✅ Good - Type guards for runtime safety
function isGQLUser(obj: unknown): obj is GQLUser {
  return typeof obj === 'object' && obj !== null && 'id' in obj
}
```

## Common Patterns to Avoid

```typescript
// ❌ Bad - Any usage
const data: any = await fetchData()

// ❌ Bad - Type assertion without reason
const user = data as GQLUser

// ❌ Bad - Overriding library types
declare module 'some-library' {
  interface ExistingType {
    newProp: any
  }
}

// ❌ Bad - Ignoring type errors
// @ts-ignore
const result = someUntypedFunction()
```

When in doubt, prefer stricter typing over looser typing. The compiler is your friend for catching bugs early.

@src/generated/graphql-client.ts
@src/generated/graphql-server.ts
@src/types
