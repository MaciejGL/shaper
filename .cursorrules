# Commit Message Format

When generating commit messages, ALWAYS use this exact structure:

```
Short, descriptive title in imperative mood (max 72 chars)

- Major change 1 described clearly
- Major change 2 described clearly
- Major change 3 described clearly
```

## Rules:

1. **Title (First Line)**:

   - Write in imperative mood (e.g., "Add feature" not "Added feature")
   - Keep under 72 characters
   - Capitalize first letter
   - No period at the end
   - Summarize the main change

2. **Empty Line**:

   - ALWAYS include one blank line after the title

3. **Bullet Points**:
   - Start each with a dash and space (`- `)
   - Focus on major changes only (3-7 bullets typically)
   - Be specific but concise
   - Group related changes together
   - Order by importance/impact

## Examples:

### Good Commit Message:

```
Implement workout session tracking feature

- Add session timer with pause/resume functionality
- Create exercise logging interface with sets and reps
- Integrate real-time progress updates with optimistic UI
- Add session history view with past workouts
```

### Bad Commit Messages:

```
Fixed stuff
```

(Too vague, no body)

```
Added new workout feature and fixed some bugs and updated the UI components and refactored the code
```

(Too long title, no bullet points)

## What to Include:

- New features added
- Bugs fixed (reference issue numbers if applicable)
- Breaking changes (mark with ⚠️)
- Database/schema changes
- API changes
- UI/UX improvements
- Performance optimizations
- Refactoring (only if significant)

## What to Exclude:

- Formatting changes (unless that's the main purpose)
- Minor typo fixes
- Dependency updates (unless critical)
- Auto-generated changes
